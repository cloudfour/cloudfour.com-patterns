@use "unit";

/**
 * Mixins and functions for dynamically adjusting a CSS property from a minimum
 * value to a maximum, starting at a minimum breakpoint width and capping at a
 * maximum breakpoint.
 *
 * Similar to Bootstrap's RFS, except it's mobile-first and only contains the
 * logic we need.
 *
 * @see https://blog.typekit.com/2016/08/17/flexible-typography-with-css-locks/
 * @see https://betterwebtype.com/articles/2019/05/14/the-state-of-fluid-web-typography/
 * @see https://github.com/twbs/rfs
 */

/**
 * Although the `calc` statement is only part of the equation, breaking it into
 * its own function makes it easier to add more fluid mixins in the future.
 *
 * 1. `$min-width` and `$max-width` should be in `em` units to avoid cross-
 *    browser inconsistencies with `rem` units in some browsers. But we need to
 *    convert the `min-width` value to `rem` so the `calc` won't be influenced
 *    by the current `font-size`, which would cause the fluid transformation to
 *    fall out of step with the viewport.
 *
 * @see https://zellwk.com/blog/media-query-units/
 */

@function fluid-calc($min-width, $max-width, $min, $max) {
  $delta: unit.strip($max - $min);
  $delta-width: unit.strip($max-width - $min-width);
  $min-width-rem: unit.swap($min-width, rem); /* 1 */

  @return calc(
    #{$min} + #{$delta} * ((100vw - #{$min-width-rem}) / #{$delta-width})
  );
}

/**
 * Fluid properties
 */

@mixin column-gap($min-width, $max-width, $min, $max, $include-min: true) {
  @if $include-min {
    column-gap: $min;
  }

  @media (min-width: $min-width) {
    column-gap: fluid-calc($min-width, $max-width, $min, $max);
  }

  @media (min-width: $max-width) {
    column-gap: $max;
  }
}

@mixin font-size($min-width, $max-width, $min, $max) {
  font-size: $min;

  @media (min-width: $min-width) {
    font-size: fluid-calc($min-width, $max-width, $min, $max);
  }

  @media (min-width: $max-width) {
    font-size: $max;
  }
}

@mixin grid-gap($min-width, $max-width, $min, $max, $include-min: true) {
  @if $include-min {
    grid-gap: $min;
  }

  @media (min-width: $min-width) {
    grid-gap: fluid-calc($min-width, $max-width, $min, $max);
  }

  @media (min-width: $max-width) {
    grid-gap: $max;
  }
}

@mixin grid-column-gap($min-width, $max-width, $min, $max, $include-min: true) {
  @if $include-min {
    grid-column-gap: $min;
  }

  @media (min-width: $min-width) {
    grid-column-gap: fluid-calc($min-width, $max-width, $min, $max);
  }

  @media (min-width: $max-width) {
    grid-column-gap: $max;
  }
}

@mixin grid-row-gap($min-width, $max-width, $min, $max, $include-min: true) {
  @if $include-min {
    grid-row-gap: $min;
  }

  @media (min-width: $min-width) {
    grid-row-gap: fluid-calc($min-width, $max-width, $min, $max);
  }

  @media (min-width: $max-width) {
    grid-row-gap: $max;
  }
}

@mixin padding($min-width, $max-width, $min, $max, $include-min: true) {
  @if $include-min {
    padding: $min;
  }

  @media (min-width: $min-width) {
    padding: fluid-calc($min-width, $max-width, $min, $max);
  }

  @media (min-width: $max-width) {
    padding: $max;
  }
}

@mixin padding-block($min-width, $max-width, $min, $max, $include-min: true) {
  @if $include-min {
    padding-block-end: $min;
    padding-block-start: $min;
  }

  @media (min-width: $min-width) {
    padding-block-end: fluid-calc($min-width, $max-width, $min, $max);
    padding-block-start: fluid-calc($min-width, $max-width, $min, $max);
  }

  @media (min-width: $max-width) {
    padding-block-end: $max;
    padding-block-start: $max;
  }
}

@mixin padding-inline($min-width, $max-width, $min, $max, $include-min: true) {
  @if $include-min {
    padding-inline-end: $min;
    padding-inline-start: $min;
  }

  @media (min-width: $min-width) {
    padding-inline-end: fluid-calc($min-width, $max-width, $min, $max);
    padding-inline-start: fluid-calc($min-width, $max-width, $min, $max);
  }

  @media (min-width: $max-width) {
    padding-inline-end: $max;
    padding-inline-start: $max;
  }
}
