/**
 * Increase root font-size a little more for large screens.
 */

@media (--lg-viewport) {
  html {
    font-size: calc(var(--ms1) * 1rem);
  }
}

/**
 * Body type styles
 *
 * 1. Base font style for everything
 * 2. Allow long words (links) to brake at arbitrary points
 * 3. Prevent automatic size adjustments on orientation change
 */

body {
  font: var(--base-font); /* 1 */
  font-weight: 400;
  word-wrap: break-word; /* 2 */
  text-size-adjust: none; /* 3 */
}

@supports (font-variation-settings: normal) {
  body {
    font-family: var(--font-family-variable);
    /* font-variation-settings: "wght" 400; */
  }
}

/**
 * Headings
 */

:--headings {
  /* font: var(--heading-font); */
  font-size: var(--font-size-sm);
  font-weight: var(--font-weight-bold);
}

/**
 * Heading sizes
 *
 * Styles stored as mixins to keep things DRY for HashHeading component.
 */

@define-mixin h1 {
  font-size: var(--font-size-lg);
  line-height: var(--line-height-sm);

  @media (--md-viewport) {
    font-size: var(--font-size-xl);
  }
}

@define-mixin h2 {
  font-size: var(--font-size-md);
  line-height: var(--line-height-sm);

  @media (--md-viewport) {
    font-size: var(--font-size-lg);
  }
}

@define-mixin h3 {
  @media (--md-viewport) {
    font-size: var(--font-size-md);
    line-height: var(--line-height-sm);
  }
}

@define-mixin h5 {
  font-size: var(--font-size-xs);
}

h1 {
  @mixin h1;
}

h2 {
  @mixin h2;
}

h3 {
  @mixin h3;
}

h5,
h6 {
  @mixin h5;
}

/**
 * Small text
 */

small {
  font-size: var(--font-size-xs);
}

/**
 * Small caps
 * http://typeplate.com/#small-caps
 */

abbr {
  font-variant: small-caps;
  text-transform: lowercase;
}

/**
 * Remove hyphenation from elements with significant formatting
 */

abbr,
blockquote,
code,
kbd,
q,
samp,
var {
  hyphens: none;
}

/**
 * Use custom monospace font on all code-like elements
 */

:--monospaced {
  font: var(--code-font);
}

/**
 * Control whitespace and wrapping on code blocks
 */

pre,
code {
  white-space: pre;
}

code {
  word-wrap: normal;
}

/**
 * Lists
 */

:--lists {
  list-style-position: outside;
}

ol,
ul {
  padding: 0 0 0 var(--list-marker-padding);
}

ul {
  list-style-type: var(--list-style-default);
}

ol {
  list-style-type: var(--list-style-numeric);
}

/**
 * Horizontal rule
 */

hr {
  height: var(--border-width-md);
  min-height: var(--border-width-sm);
  border-style: none;
  background-color: var(--color-relative);
  opacity: var(--opacity-lower);
}

/**
 * Blockquote
 *
 * Assumes markup to be:
 *
 * <blockquote>
 *   <p>The movie was awesome</p>
 *   <footer>
 *     <cite>Some Person</cite>
 *   </footer>
 * </blockquote>
 *
 * http://html5doctor.com/cite-and-blockquote-reloaded/
 */

blockquote {
  font-style: italic;
  padding-left: var(--base-margin);
}

/**
 * Make sure items are still spaced apart, using `margin-bottom` so inline
 * elements won't run up against their preceding sibling.
 */

blockquote > *:not(:last-child) {
  margin-bottom: var(--base-margin);
}

/**
 * Make the last paragraph that's a direct descendent and an adjacent footer
 * (if any) inline so that they'll run together all fancy-like. ðŸŽ©
 */

blockquote > p:last-of-type,
blockquote > p:last-of-type + footer {
  display: inline;
}

/**
 * If the last paragraph's adjacent sibling is *not* a footer, give it a margin
 * top to compensate for the paragraph's inline-edness.
 */

blockquote > p:last-of-type + *:not(footer) {
  margin-top: var(--base-margin);
}

blockquote cite {
  font-style: normal;
}

/**
 * Precede citation with em dash and non-breaking space.
 */

blockquote cite::before {
  content: "â€”\00a0";
}
