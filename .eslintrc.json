{
  "extends": ["plugin:@cloudfour/recommended", "plugin:mdx/recommended"],
  "globals": {
    "Prism": true
  },
  "plugins": ["react", "@typescript-eslint"],
  "settings": {
    "node": {
      "allowModules": [
        "@storybook/addon-docs",
        "@storybook/addon-knobs",
        "@storybook/client-api"
      ]
    }
  },
  "rules": {
    "padding-line-between-statements": "off",
    "react/jsx-uses-vars": "error"
  },
  "overrides": [
    {
      "files": ["*.ts", "*.tsx"],
      "parser": "@typescript-eslint/parser",
      "parserOptions": {
        "project": "./tsconfig.json"
      },
      "extends": [
        "plugin:@typescript-eslint/eslint-recommended",
        "plugin:@typescript-eslint/recommended",
        "plugin:@typescript-eslint/recommended-requiring-type-checking",
        "eslint-config-prettier/@typescript-eslint" // Disable typescript-eslint rules that conflict with Prettier
      ],
      "rules": {
        "@typescript-eslint/explicit-module-boundary-types": "off", // inference is usually useful, even for module boundaries
        "@typescript-eslint/no-unused-vars": "off", // TypeScript itself checks this via the "noUnusedLocals"/"noUnusedParameters" options
        "@typescript-eslint/ban-ts-comment": [
          "error",
          { "ts-expect-error": false }
        ], // Allow @ts-expect-error

        "@typescript-eslint/prefer-optional-chain": "error", // Optional chaining syntax is shorter+clearer than alternatives

        "@cloudfour/node/no-missing-import": "off", // TS handles checking this
        "@cloudfour/jsdoc/require-param-type": "off", // We don't want to have a type in the JSDoc block, just in the actual parameters
        "@cloudfour/jsdoc/require-returns-type": "off" // Same deal
      }
    }
  ]
}
