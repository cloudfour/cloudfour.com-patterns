@use '../design-tokens/aspect-ratio.yml';
@use '../mixins/media-query';
@use 'sass:meta';

/// The default aspect ratio will not be output outside of a media query.
/// @type Number
$default-aspect-ratio: aspect-ratio.$square;

/// Saving a map of aspect ratio values makes it easier to loop through.
/// @type Map
$aspect-ratio-map: meta.module-variables('aspect-ratio');

/// Makes ratio modifier classes based on the `aspect-ratio` and `breakpoint`
/// design tokens. Intended to be included from within a base class.
///
/// @param {String} $default-aspect-ratio [$default-aspect-ratio] - We won't
/// output this property again outside of a breakpoint since it shouldn't be
/// necessary.
/// @output Ratio modifier classes for supported breakpoints.
@mixin aspect-ratio-modifiers($default-aspect-ratio: $default-aspect-ratio) {
  @each $name, $ratio in $aspect-ratio-map {
    &--#{$name} {
      @include media-query.breakpoint-classes(
        $include-default: $ratio != $default-aspect-ratio
      ) {
        --aspect-ratio: #{$ratio};
      }
    }
  }
}

/**
 * This pattern uses the now-classic padding box hack, with a modern twist. The
 * aspect ratio is defined via a custom property, which allows us arbitrary
 * ratios based on content needs.
 *
 * @see https://css-tricks.com/aspect-ratio-boxes/#article-header-id-7
 */

/**
 * Fallback behavior: Browsers that do not support custom properties will use
 * the element's intrinsic aspect ratio. These styles cause the element to fill
 * the available width.
 *
 * We need to target picture elements differently to account for the nested
 * `img` element.
 */

@mixin object-fallback {
  > *,
  > picture > img {
    display: block;
    width: 100%;
  }
}

@mixin object($default-aspect-ratio: $default-aspect-ratio) {
  @supports (--custom: property) {
    /**
   * Here's where the magic happens! ðŸ¦„
   *
   * 1. We default to a square aspect ratio. This is suitable for icons, profile
   *    images, etc. It's also the simplest default.
   * 2. Required for rounded corners to work as expected. We could apply this
   *    by default, but then circular rounding would appear elliptical in older
   *    browsers.
   * 3. Required to absolute-position child elements.
   */

    --aspect-ratio: #{$default-aspect-ratio}; /* 1 */
    overflow: hidden; /* 2 */
    position: relative; /* 3 */

    /**
     * The pseudo element is required to make the padding hack work.
     *
     * 1. The parentheses around `var` are necessary to support values with
     *    operators, for example `16/9`.
     */

    &::before {
      content: '';
      display: block;
      padding-bottom: calc(100% / (var(--aspect-ratio))); /* 1 */
    }

    /**
     * We absolute-position child elements so they are not pushed down by the
     * pseudo element.
     *
     * We need to target picture elements differently to account for the
     * nested `img` element.
     *
     * 1. This avoids distorting the image if its aspect ratio does not match
     *    that of the embed.
     */

    > *,
    > picture > img {
      height: 100%;
      left: 0;
      object-fit: cover; /* 1 */
      object-position: center; /* 1 */
      position: absolute;
      top: 0;
      width: 100%;
    }

    @include aspect-ratio-modifiers();
  }
}
