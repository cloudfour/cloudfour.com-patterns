@use '../../compiled/tokens/scss/breakpoint';
@use '../../compiled/tokens/scss/size';
@use '../../mixins/fluid';
@use '../../mixins/media-query';

/**
 * 1. If horizontal items are shown at the wrong column count, they will appear
 *    to break the grid. This rule keeps items densely packed so it will always
 *    appear visually correct.
 *
 * @todo Use progressive enhancement so older browsers get a minimal fallback.
 */

.o-deck {
  display: grid;
  grid-auto-flow: dense; /* 1 */
  grid-gap: fluid.fluid-clamp(
    size.$spacing-gap-fluid-min,
    size.$spacing-gap-fluid-max,
    breakpoint.$s,
    breakpoint.$xl
  );

  /**
   * We define a media query for our initial grid so child elements will flex
   * for viewports smaller than our minimum column size.
   *
   * Our use of `auto-fit` means columns will be automatically created as space
   * allows.
   */

  @media (width >= breakpoint.$xs) {
    grid-template-columns: repeat(
      auto-fit,
      minmax(#{size.$width-card-column-min}, 1fr)
    );
  }
}

/**
 * Responsive column count modifiers
 *
 * These modifier classes specify a hard-set column count at a particular
 * breakpoint. This may be used to limit the column count to a particular
 * maximum or to coordinate with adjacent elements.
 */

@for $i from 1 through 4 {
  .o-deck--#{$i}-column {
    @include media-query.breakpoint-classes($from: s, $to: xl) {
      grid-template-columns: repeat(#{$i}, 1fr);
    }
  }
}

/**
 * Content alignment modifier
 */

.o-deck--align-start {
  align-items: start;
}

/**
 * Block alignment adjustments
 *
 * 1. Set inline padding to match `o-container__fill-pad`.
 *    We're using the container tokens here, but ideally we'd make a
 *    token for the whole `fluid-clamp()` formula, but our token system
 *    doesn't support using Sass formulas that way. This should be okay,
 *    since we're still matching the container's tokens.
 * 2. Adjust default `alignfull` margin to subtract padding.
 *    (see next comment for context.)
 * 3. In a perfect world, we'd just set padding here, and let the default
 *    `alignfull` margins make the layout full-bleed. Unfortunately, the
 *    default margins use viewport units which don't factor in scrollbars.
 *    This meant our content was actually wider than the viewport and got
 *    clipped, with a horizontal scrollbar. So instead of setting padding,
 *    we're overriding the default margins to be less than full-bleed by
 *    the amount of our padding. If anyone fixes the bug with `alignfull`
 *    then this code can be simplified to just set `padding-inline`.
 * 4. Only set margin when `alignwide` is full-bleed, to avoid overriding
 *    the default `alignwide` negative margins.
 */

$deck-aligned-padding: fluid.fluid-clamp(
  size.$padding-container-horizontal-min,
  size.$padding-container-horizontal-max,
  breakpoint.$s,
  breakpoint.$xl
); // 1
$deck-aligned-margin: calc(-50vw + 50% + #{$deck-aligned-padding}); // 2

.o-deck.alignfull {
  margin-inline: $deck-aligned-margin; // 3
}

.o-deck.alignwide {
  @media (width < breakpoint.$l) {
    margin-inline: $deck-aligned-margin; // 4
  }
}
