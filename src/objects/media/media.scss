@use '../../compiled/tokens/scss/breakpoint';
@use '../../compiled/tokens/scss/size';
@use '../../mixins/media-query';
@use '../../mixins/ms';

/**
 * 1. Middle-align child elements. This will take effect when the content is
 *    shorter than the object.
 */

.o-media {
  align-items: center; /* 1 */
  display: grid;
  grid-gap: size.$spacing-media-gap;
  grid-template-columns: minmax(0, auto) 1fr;
}

/**
 * 1. This will take effect when the object is shorter than the content, making
 *    the whole element appear top-aligned in that case.
 * 2. To encourage a semantic document outline, we decouple this element's
 *    visual order from its markup order.
 */

.o-media__object {
  align-self: start; /* 1 */
  order: -1; /* 2 */
}

/**
 * Modifier: Generous Gap
 *
 * Increases the size of the gap between the media object and content.
 */

.o-media--generous {
  column-gap: ms.step(3);
}

/**
 * Modifier: Reverse
 *
 * Swap gap position and visual order.
 */

.o-media--reverse .o-media__object {
  order: 1;
}

/**
 * Modifier: Jaunty
 *
 * Applies a fun rotation to the media object, and a bit of margin to
 * compensate for the rotation.
 */

.o-media--jaunty .o-media__object {
  margin-inline: ms.step(-4);
  transform: rotate(-5deg);
}

.o-media--reverse.o-media--jaunty .o-media__object {
  transform: rotate(5deg);
}

/**
 *  Modifier: Content Sizing
 *
 * This modifier lets us use fractional units to size media content in relation
 * to the object. This should make it easier to align the content of multiple
 * media elements, even when the objects differ in size.
 */

@for $i from 1 through 4 {
  .o-media--1-by-#{$i} {
    @include media-query.breakpoint-classes($from: s, $to: xl) {
      grid-template-columns: 1fr #{$i}fr;

      .o-media__object {
        justify-self: center;
      }
    }
  }
}
