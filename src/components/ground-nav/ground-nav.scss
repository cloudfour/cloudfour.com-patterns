@use '../../compiled/tokens/scss/breakpoint';
@use '../../compiled/tokens/scss/color';
@use '../../compiled/tokens/scss/font-weight';
@use '../../compiled/tokens/scss/size';
@use '../../mixins/border-radius';
@use '../../mixins/ms';
@use '../../mixins/spacing';
@use '../../mixins/theme';
@use '../../mixins/unit';
@use 'sass:math';

@include theme.props {
  --theme-blend-mode-background: multiply;
}

@include theme.props(dark) {
  --theme-blend-mode-background: hard-light;
}

// Whitespace used for gaps, padding and margin
// (It uses `rem` so space will be consistent throughout the component)
$_ground-nav-space: ms.step(3, 1rem);

// Negative value used to reduce the space around elements as well as position elements.
$_ground-nav-negative-space: ($_ground-nav-space * -1);
$_ground-nav-border-width: size.$edge-medium;
$_ground-nav-border-style: solid;
$_ground-nav-border-color: var(--theme-color-border-base);
$_ground-nav-border-color-fallback: color.$base-gray-light;

/**
 * Feature
 */
.c-ground-nav__features {
  @include border-radius.conditional;
  overflow: hidden;
}

/**
 * Feature
 */
.c-ground-nav__feature {
  @include spacing.fluid-padding-block;
  inline-size: 100%;
}

/**
 * 1. We establish vertical whitespace for the action to simplify alignment of
 *    the illustration, but other whitespace is assumed to be handled by the
 *    container object to promote alignment with adjacent sections.
 * 2. Allow illustration to be positioned relative to this container.
 */

.c-ground-nav__action {
  padding-block: $_ground-nav-space; /* 1 */
  position: relative; /* 2 */
}

.c-ground-nav__action-inner {
  /**
   * Starting at this viewport, we want to position the illustration relative to
   * the inner element (away from the nearest horizontal edge).
   */

  @media (min-width: breakpoint.$m) {
    position: relative;
  }

  @media (min-width: breakpoint.$l) {
    align-items: center;
    display: flex;
  }
}

/**
 * 1. Creates space between the action lead in and action title.
 * 2. Adds horizontal space when these elements are side by side.
 */
.c-ground-nav__action-title {
  margin-block-start: $_ground-nav-space; /* 1 */

  @media (min-width: breakpoint.$l) {
    margin: ms.step(4) $_ground-nav-space; /* 2 */
  }
}

/**
 * The illustration is aligned with the footer content.
 * As the screen size increases, we decrease the size
 * of the illustration so that it doesn't get too large.
 */

.c-ground-nav__action-illustration {
  inline-size: 40%;
  inset-block-end: 0;
  inset-inline-end: 0;
  position: absolute;

  /**
   * We position ourselves relative to a max-width container starting at this
   * breakpoint, so we have to adjust the bottom position to account for the
   * change in whitespace.
   */

  @media (min-width: breakpoint.$m) {
    inline-size: calc(100% / 3);
    inset-block-end: $_ground-nav-negative-space;
  }

  @media (min-width: breakpoint.$l) {
    inline-size: 25%;
  }
}

.c-ground-nav__content {
  --theme-color-text-emphasis: var(--theme-color-text-muted);
  background-blend-mode: var(--theme-blend-mode-background);
  background-color: var(--theme-color-background-secondary);
  background-image: svg-load('illustrations/portland.svg');
  background-position: right bottom;
  background-repeat: no-repeat;
  background-size: auto clamp(ms.step(6), 15vw, ms.step(9));
  color: var(--theme-color-text-muted);
  // grid-column: 1;
  // grid-row: 3;

  @media (width >= breakpoint.$xxl) {
    background-size: auto ms.step(10);
  }

  /**
   * Align image to the right edge of the container or viewport
   */
  @media (width >= breakpoint.$xxxl) {
    $size-half-spread: math.div(size.$max-width-spread, 2);
    $size-inline-spacing: spacing.$fluid-spacing-inline-max;
    $right-container: calc(
      50vw - #{$size-half-spread} - #{$size-inline-spacing}
    );
    background-position: right #{$right-container} bottom;
  }
}

/**
 * Creates vertical space between elements when grid isn't supported.
 */
.c-ground-nav__content-inner > * + * {
  margin-block-start: ms.step(2);
}

.c-ground-nav__address {
}

.c-ground-nav__social-icon {
  --icon-size: #{size.$icon-large};
}

.c-ground-nav__menu {
}

.c-ground-nav__menu-items {
}

.c-ground-nav__legal {
  font-size: size.$font-small;
}

/**
 * We use CSS grid when supported by the browser.
 *
 * As the screen size increases, the number of columns increases.
 * Instead of making all the columns the same size, we use `minmax`
 * for some of the columns to make sure the content in these sections
 * don't have any line breaks, but can still grow as horizontal
 * space allows.
 */
@supports (display: grid) {
  .c-ground-nav__content-inner {
    column-gap: spacing.$fluid-gap;
    display: grid;
    grid-template-areas:
      'address'
      'menu'
      'topics'
      'social'
      'legal';
    grid-template-columns: minmax(0, 1fr);
    row-gap: ms.step(2);

    // Reserve a bit of space for the illustration
    @media (width < breakpoint.$s) {
      padding-block-end: ms.step(6);
    }

    // Pop the menus side by side
    @media (width >= breakpoint.$s) {
      grid-template-areas:
        'address address'
        'menu topics'
        'social social'
        'legal legal';
      grid-template-columns: minmax(0, auto) minmax(0, 1fr);
    }

    // Switch to a horizontal layout
    @media (width >= breakpoint.$m) {
      grid-template-areas:
        'address menu topics'
        'social menu topics'
        'legal legal legal';
      grid-template-columns: repeat(2, minmax(0, auto)) minmax(0, 1fr);
    }

    // Now we have space to pop the social icons to the right
    @media (width >= breakpoint.$xl) {
      grid-template-areas:
        'address menu topics social'
        'legal menu topics .';
      grid-template-columns: repeat(3, minmax(0, auto)) minmax(0, 1fr);
    }

    // Add a bit more breathing room between items
    @media (width >= breakpoint.$xxl) {
      // prettier-ignore
      grid-template-columns: minmax(0, 1fr) repeat(2, minmax(0, auto)) minmax(0, 1fr);
    }

    // Allow generous breathing room between items
    @media (width >= breakpoint.$xxxl) {
      // prettier-ignore
      grid-template-columns: minmax(0, 2fr) repeat(2, minmax(0, 1fr)) minmax(0, 2fr);
    }
  }

  /**
   * Removes the margin used by our fallback design. Grid allows us to
   * use `grid-gap` to create consistent space between elements.
   */
  .c-ground-nav__content-inner > * + * {
    margin: 0;
  }

  /**
   * The visual order of the footer content is different than the
   * semantic order. We explicitly define where content should
   * be placed within the grid.
   */
  .c-ground-nav__address {
    grid-area: address;
  }

  .c-ground-nav__address-section {
    @media (width >= breakpoint.$m) {
      display: inline-block;
      margin-block-start: ms.step(2);
    }
  }

  .c-ground-nav__menu {
    grid-area: menu;
  }

  .c-ground-nav__topics {
    grid-area: topics;
  }

  .c-ground-nav__social {
    --icon-size: #{size.$icon-medium};
    align-self: end;
    grid-area: social;

    @media (width >= breakpoint.$xl) {
      --icon-size: #{size.$icon-large};
      align-self: start;
      justify-self: end;
    }
  }

  .c-ground-nav__legal {
    align-self: end;
    grid-area: legal;

    @media (breakpoint.$xl > width >= breakpoint.$m) {
      margin-block-start: ms.step(2);
    }
  }
}
