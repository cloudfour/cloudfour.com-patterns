{
  "version": "https://jsonfeed.org/version/1",
  "title": "Cloud Four",
  "home_page_url": "https://cloudfour.com/",
  "description": "We design and develop responsive websites and progressive web apps.",
  "items": [
    {
      "guid": "https://cloudfour.com/?p=5752",
      "url": "https://cloudfour.com/thinks/getting-unstuck/",
      "image": "https://cloudfour.com/wp-content/uploads/2020/04/HD.4G.038_10537689444-scaled-e1585787011260.jpg",
      "title": "Getting Unstuck",
      "content_html": "<div class=\"u-release\"><img class=\"alignnone wp-image-5780 size-full\" src=\"https://cloudfour.com/wp-content/uploads/2020/04/HD.4G.038_10537689444-scaled-e1585787011260.jpg\" alt=\"\" width=\"2368\" height=\"1100\" srcset=\"https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/HD.4G.038_10537689444-scaled-e1585787011260.jpg 2368w, https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/HD.4G.038_10537689444-scaled-e1585787011260-300x139.jpg 300w, https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/HD.4G.038_10537689444-scaled-e1585787011260-1024x476.jpg 1024w, https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/HD.4G.038_10537689444-scaled-e1585787011260-768x357.jpg 768w, https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/HD.4G.038_10537689444-scaled-e1585787011260-1536x714.jpg 1536w, https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/04/HD.4G.038_10537689444-scaled-e1585787011260-2048x951.jpg 2048w\" sizes=\"(max-width: 2368px) 100vw, 2368px\" /></div>\n<div class=\"u-bgGray u-pad1 u-pullSides1 u-spaceItems1 u-textGrow1\"><p>Problem-solving is an essential part of software development. Bugs are inevitable and the ongoing opportunity to solve puzzles is one of the reasons I love this work. However, sometimes we get stuck on a particularly baffling problem, and this can feel frustrating and discouraging. The following are some of the methods I turn to when this happens to me.</p></div>\n<h2>Question everything you &#8220;know&#8221;</h2>\n<p>The most puzzling problems almost definitionally have one thing in common: something we <em>think</em> we know is incorrect. At the outset there is no way to know what we have overlooked, so be a good detective and consider everything a suspect. This includes sections of code that seem trivial or obvious, as well as all of your tools (including the browser!). Sometimes solutions to the most mysterious problems are hiding in plain sight.</p>\n<p>I once spent hours trying to understand why I wasn&#8217;t seeing updates to a user&#8217;s profile page, only to eventually realize that I was signed in as a different user. On another occasion, I struggled late into the night trying to figure out why new records weren&#8217;t getting saved in the database. It turned out I was looking in the wrong database. I have more examples like this than I care to admit!</p>\n<p>It is a time-honored developer tradition to start by printing your variables. In many cases, this reveals the problem right away. But when you don&#8217;t find what you&#8217;re looking for, or what you find doesn&#8217;t make sense, take a scorched earth approach to logging. Log <em>everything</em> and then log some more. Start from the unexpected result and work your way backwards, logging everything you can, including values you feel certain you know.</p>\n<p>If I trace the problem as far back as possible and things still do not make sense, then it&#8217;s time for some high-level sanity checks. Is my unit test actually calling the code I think I&#8217;m testing? Is my browser actually pointed at the correct instance of the site? In my experience, sometimes the most frustrating bugs have the simplest (overlooked) solutions.</p>\n<h2>Peel the problem</h2>\n<p>Sometimes multiple factors combine like layers of an onion to create what feels like a single intractable problem. In situations like these, it is sometimes helpful to temporarily shift your focus away from the conspicuous problem, and instead focus on the intermediate factor(s) getting in the way. For example, if an error only occurs in a remote environment perhaps locating the log files is the first layer of the problem that needs to be solved.</p>\n<p>Imagine an e-commerce site with a checkout form that throws an error. My first instinct is usually to work directly towards the desired end state. In this example, that would focus my attention on preventing the error. But this might be extremely inefficient if I don&#8217;t have an easy way to submit the form without making an actual purchase. Sometimes the quickest way to the solution feels indirect, and might even involve temporarily &#8220;breaking&#8221; things. The fastest way to solve the checkout error might be to first disable the payment gateway so I can resubmit the form (without going broke). It may feel regressive because now two things are &#8220;broken&#8221; but this is significant progress if it gets me closer to solving the underlying problem.</p>\n<p>When I catch myself grumbling &#8220;if I <em>just</em> had&#8230;&#8221; I try to stop and think hard about what it would take to address that need. Is there an affordable tool that would unblock me? Is there a gap in my knowledge that is forcing me to guess about something knowable? Simply put: don&#8217;t allow the problem to distract from the solution.</p>\n<h2>Think about the negative facts</h2>\n<p>Error messages and broken layouts tend to draw our attention. But sometimes we can learn important lessons even when the problem does not occur. The term <em>negative facts</em> is a bit contentious in philosophy circles, but for our purposes it simply refers to instances where the issue <em>doesn&#8217;t</em> happen.</p>\n<p>Recently I investigated a site that was loading extremely slowly. The problem was inconsistent, affecting a small but steady portion of page loads and we were struggling to find an explanation. We scrutinized everything we could think of to explain the slow responses, but studying the &#8220;normal&#8221; responses turned out to be more fruitful. It was eventually discovered that these requests all included a header indicating that they hit the CDN cache. This clue helped us determine that the performance bottleneck was consistently present on the origin server, but often concealed by the caching layer. This created the illusion of mysterious delays when in reality we were actually noticing the absence of caching.</p>\n<p>If the same component throws an error on one page, but not another, maybe there is something special about that page that causes the error. Or, maybe there is something special on the other page that is <em>preventing</em> the error. If only certain users experience a bug, it&#8217;s natural to first wonder what they all have in common? But if you cannot find a pattern, don&#8217;t forget to look for a pattern in all the users that <em>don&#8217;t</em> report the problem.</p>\n<p>A simple exercise that helps me to think in this way starts by asking myself: &#8220;If what I think is true, then what else should I expect to see?&#8221; Challenging my working hypothesis in this way helps me avoid guessing by comparing my theory to the evidence. It also helps me notice missing evidence, and this absence might be just as significant.</p>\n<h2>Write the question</h2>\n<p>Community support forums and Q&amp;A sites like StackOverflow are incredibly powerful resources in multiple ways. Obviously, your question might be answered by a helpful stranger, and this is lovely. But I do this even for extremely obscure problems that are unlikely to be answered by the community. Very often, the exercise of writing my question causes me to consider the problem in a different way so I can figure it out myself.</p>\n<p>I used to think of this as a last resort that I would turn to only when everything else didn&#8217;t work. But now I do this much earlier in my sequence. Stopping to write the question may feel like it takes time away from debugging the problem. But the act of writing the question <em>is</em> part of debugging the problem because a good question requires that you restate the facts, summarize what you&#8217;ve already tried, and define the exact information that you are searching for. Even if the act of writing the question turns out not to be fruitful, the sooner the question is published, the sooner the community has a chance to see it and potentially answer it. It&#8217;s an investment. Make it early.</p>\n<p>You can also do a spoken version of this technique. I find this particularly helpful when I am working in parallel with other members of a team. Everyone is working towards the same eventual goal of solving the problem, but the pieces they already understand, the ways they are thinking about the problem, and the solutions they&#8217;re exploring are often different. Remind yourselves to speak aloud what you think might be happening, why you think that, and what you need to figure out in order to verify it.</p>\n<h2>Take a walk</h2>\n<p>Most of us want to end a work session on a high note. It&#8217;s unsatisfying to step away from something unresolved or broken. But ironically this is sometimes the quickest way to fix it. If I focus on the same problem for a long time it becomes difficult to maintain perspective and objectivity. It also makes me tired, which tends to promote guessing and sloppiness. Often, a short break is all I need before returning to the problem with clear eyes and sharper thinking. This simple tactic is the single most effective debugging technique in my toolbox.</p>\n<p>I have learned to resist the fear that my current headspace is essential and I won&#8217;t ever be able to recover it when I return. I will. I also resist the delusion that if I stay up all night grinding away I&#8217;ll eventually figure it out. I probably won&#8217;t. Countless times, I have made this mistake: stubbornly working late on something frustrating before finally giving up, only to return the next morning and immediately notice a missing semicolon or a typo in a variable name. It takes practice, but I have learned to recognize the early signs of getting stuck or frustrated. When I feel this happening I step away, or I set a strict time limit for how long I will allow myself to keep struggling before I take a break. Experience has taught me that the sooner I take that break, the sooner I will actually solve my problem.</p>\n<h2>A final bit of advice</h2>\n<p>Don&#8217;t forget to savor the moment whenever you finally solve your difficult problem. Do a victory dance. Drink a tasty beverage. Consider calling it a day. Problems tend to clamor for our attention, but successes can slip by quietly if we allow them. You&#8217;ve worked hard and accomplished something challenging. There will always be more problems to solve tomorrow.</p>\n<p></p>",
      "summary": "Question everything you &#8220;know&#8221; The most puzzling problems almost definitionally have one thing in common: something we think we know is incorrect. At the outset there is no way to know what we have overlooked, so be a good detective and consider everything a suspect. This includes sections of code that seem trivial or obvious, [&#8230;]",
      "date_published": "2020-04-03T08:00:06.000Z",
      "author": {
        "name": "Emerson Loustau",
        "url": "https://cloudfour.com/is/emerson/",
        "avatar": "https://cloudfour.com/wp-content/uploads/2020/04/emerson-128x128-c-default.png"
      }
    },
    {
      "guid": "https://cloudfour.com/?p=5773",
      "url": "https://cloudfour.com/thinks/responsive-images-the-simple-way/",
      "image": "https://cloudfour.com/wp-content/uploads/2020/03/summary.png",
      "title": "Responsive Images the Simple Way",
      "content_html": "<div class=\"u-bgGray u-pad1 u-pullSides1 u-spaceItems1\"><p>Long-time Cloud Four readers will be familiar with <a href=\"https://cloudfour.com/thinks/responsive-images-101-definitions/\">Jason’s definitive series on responsive images</a>. This article is meant as a shorter companion piece focused on the most common responsive image use case: resolution switching.</p></div>\n<div class=\"u-pullSides1 u-md-pullSides6\"><figure class=\"Figure\"><img src=\"https://cloudfour.com/wp-content/uploads/2020/03/summary.png\" alt=\"Labeled screenshot of responsive image code example, saying &quot;At this screen size I will be displayed at roughly this size (pointing to the sizes attribute). You can choose from any of these images, which are this wide (pointing to the srcset attribute). So please pick the best image for right now.&quot;\" width=\"1920\" height=\"1080\" class=\"size-full wp-image-5777\" srcset=\"https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/03/summary.png 1920w, https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/03/summary-300x169.png 300w, https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/03/summary-1024x576.png 1024w, https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/03/summary-768x432.png 768w, https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/03/summary-1536x864.png 1536w\" sizes=\"(max-width: 1920px) 100vw, 1920px\" /><figcaption class=\"Figure-caption u-textShrink1\">This image is based on a <a href='https://twitter.com/csswizardry/status/836960832789565440'>tweet by Harry Roberts</a></figcaption></figure></div>\n<p>The responsive images spec is fantastic and covers <a href=\"http://usecases.responsiveimages.org/\">a lot of use cases</a>, but in my experience, most of the time you’ll only need to understand one of them: Serving a different sized copy of the same image depending on the user’s viewport width. We call this <strong>resolution switching</strong>, and you can accomplish it using the <code>srcset</code> and <code>sizes</code> attributes.</p>\n<p>The logic behind displaying an image responsively is complicated. It involves determining how large the image will be displayed, as well as understanding whether the user is on a high-resolution display, among other things. Thankfully, the browser is better equipped than we are to handle this logic. All we need to do is give it some hints. We’ll use the <code>srcset</code> attribute to provide a list of image assets to choose from, and the <code>sizes</code> attribute to tell the browser how large the image will display at various breakpoints.</p>\n<p>Oh, and don’t worry about browser support! Not only do these attributes have <a href=\"https://caniuse.com/#search=srcset\">excellent support across the board</a>, we’ll also be providing a fallback for older browsers like IE11.</p>\n<ol>\n<li><a href=\"#the-srcset-attribute\">The <code>srcset</code> Attribute</a></li>\n<li><a href=\"#the-sizes-attribute\">The <code>sizes</code> Attribute</a></li>\n<li><a href=\"#the-src-attribute\">The <code>src</code> Attribute</a></li>\n<li>FAQs\n<ol>\n<li><a href=\"#how-should-i-generate-my-image-assets\">How Should I Generate My Image Assets?</a></li>\n<li><a href=\"#what-image-sizes-should-i-provide\">What Image Sizes Should I Provide?</a></li>\n<li><a href=\"#what-sizes-values-should-i-declare\">What <code>sizes</code> Values Should I Declare?</a></li>\n<li><a href=\"#how-can-i-check-that-i-did-it-right\">How Can I Check That I Did It Right?</a></li>\n</ol>\n</li>\n<li><a href=\"#conclusion\">Conclusion</a></li>\n<li><a href=\"#learn-more\">Learn More</a></li>\n</ol>\n<h2>The <code>srcset</code> Attribute</h2>\n<p>The <code>srcset</code> attribute provides the browser with a set of sources to choose from, and what size each of those sources is.</p>\n<div class=\"u-pullSides1 u-md-pullSides6\"><figure class=\"Figure\"><img src=\"https://cloudfour.com/wp-content/uploads/2020/03/srcset.png\" alt=\"Labeled screenshot of responsive image code example, showing the srcset attribute, pointing out that it contains image URLs and the widths of those images, and that the browser picks the best source from the set, including retina.\" width=\"1920\" height=\"1080\" class=\"size-full wp-image-5775\" srcset=\"https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/03/srcset.png 1920w, https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/03/srcset-300x169.png 300w, https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/03/srcset-1024x576.png 1024w, https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/03/srcset-768x432.png 768w, https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/03/srcset-1536x864.png 1536w\" sizes=\"(max-width: 1920px) 100vw, 1920px\" /></figure></div>\n<p>It’s a comma-separated list of URLs paired with widths. Each item in the list looks like this: “<code>image.jpg 1000w</code>,” which tells the browser that the file <code>image.jpg</code> is 1000 pixels wide.</p>\n<p>By providing a collection of image assets in this way, you’re saying to the browser: “I’m giving you a list of images and I trust you to pick the best one.”</p>\n<p>The browser will choose the best image based on a complex set of criteria including what size the image is displayed to the user at their current viewport size, and whether the user has a high-resolution display or not.</p>\n<p>It’s smart enough to know that on a low-resolution desktop screen if the image will be displayed at 800 pixels wide, it should choose an asset from the list that is at least 800 pixels wide.</p>\n<p>It will also know that if the image will be displayed at 320 pixels wide on a retina screen, it should choose an asset that is at least 640 pixels wide. So you don’t have to worry about <code>1x</code> and <code>2x</code> assets. All you have to do is provide a good set of images, and the browser will do the rest.</p>\n<p><em>Not sure what image sizes to provide? See below!</em></p>\n<h2>The <code>sizes</code> Attribute</h2>\n<p>The <code>srcset</code> attribute is all well and good, but when the browser is reading your HTML, it doesn’t know if you’ve used CSS to scale your image to be 50% of the width of the screen.</p>\n<p>That’s where the <code>sizes</code> attribute comes in. It’s how we give the browser a hint about how the image will be rendered once CSS is applied.</p>\n<div class=\"u-pullSides1 u-md-pullSides6\"><figure class=\"Figure\"><img src=\"https://cloudfour.com/wp-content/uploads/2020/03/sizes.png\" alt=\"Labeled screenshot of responsive image code example, showing the sizes attribute, pointing out that it contains media queries describing the width of the window, and the width of the image when that condition matches. The last item has no media query and is the default width when no condition matches. The browser users the first condition that matches.\" width=\"1920\" height=\"1080\" class=\"size-full wp-image-5774\" srcset=\"https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/03/sizes.png 1920w, https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/03/sizes-300x169.png 300w, https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/03/sizes-1024x576.png 1024w, https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/03/sizes-768x432.png 768w, https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/03/sizes-1536x864.png 1536w\" sizes=\"(max-width: 1920px) 100vw, 1920px\" /></figure></div>\n<p>The <code>sizes</code> attribute is a comma-separated list of media conditions<sup id=\"fnref-5773-1\"><a href=\"#fn-5773-1\" class=\"jetpack-footnote\">1</a></sup> paired with widths. Each item in the list looks like this: “<code>(min-width: 1023px) 780px</code>,” which would tell the browser that when the viewport is 1023 pixels wide (or wider), the image will be exactly 780 pixels wide.</p>\n<p>You can also use relative widths, such as <code>50vw</code> which says the image will be 50 percent of the viewport width. You can even use <code>calc</code> for more complex situations. For example, <code>calc(50vw - 2rem)</code> says the image will be 50 percent of the viewport width, minus <code>2rem</code>, perhaps to account for some padding or border.</p>\n<p>The last item on your list does not need to have a media condition. If you provide a width and leave the media condition off, then it will be treated as the default width that will be used if nothing else matches.</p>\n<p>The browser will work its way down this list and apply the first item that matches the viewport. So given a <code>sizes</code> attribute of:</p>\n<pre><code class=\"language-html\">(min-width: 1023px) 780px,\n(min-width: 675px) 620px,\n100vw\n</code></pre>\n<ul>\n<li>If the user is on a large desktop display, the browser matches the first item in the list and knows the image will be 780 pixels wide.</li>\n<li>A standard iPad in vertical orientation is 768 pixels wide, so the browser would skip the first item, but match the second, which says the image will be 620 pixels wide.</li>\n<li>A user on a typical mobile device wouldn’t match either of the first two and would land on the last one, which says the image will be 100% of the viewport width.</li>\n</ul>\n<p>Of course, these are just examples, and the real world is messy. A user on a large display with a narrow window would get a smaller image. A user on an iPad Pro might get the large image when holding the tablet in landscape mode, the medium image when holding in portrait mode, or the small image if using the browser in split-screen mode. Some larger phones will qualify for the second rule when held in landscape mode. That&#8217;s the beauty of this system — you don&#8217;t have to think about all these form factors. You only have to consider what size image to display based on the viewport width.</p>\n<p><em>Not sure what values to declare? See below!</em></p>\n<h2>The <code>src</code> Attribute</h2>\n<p>You may have noticed that all the examples I’ve provided still have a <code>src</code> attribute, and wonder if it’s still needed. The answer is that if you provide a <code>srcset</code> attribute, modern browsers will <a href=\"https://cloudfour.com/examples/img-currentsrc/\">replace the <code>src</code> value in the DOM</a> with the image that is selected from the <code>srcset</code>. So modern browsers will ignore the value you specify in the <code>src</code> attribute in favor of <code>srcset</code>.</p>\n<p>But <code>src</code> is still important for browsers that don’t support responsive images. These older browsers will ignore the <code>srcset</code> and <code>sizes</code> attributes because they can’t understand them. However, they will understand the <code>src</code> attribute, so you can provide a single image as a fallback for them. I usually pick the smallest image that will still look good on a non-retina desktop monitor.</p>\n<h2>FAQs</h2>\n<h3>How Should I Generate My Image Assets?</h3>\n<p>You can generate your images in several ways: by hand, using a responsive image generator tool, or with an image CDN.</p>\n<p>To generate your images by hand, open the original image in Photoshop (or your editor of choice) and export it at all the sizes you want.</p>\n<p>That can be a bit time-consuming, so you may want to use a tool to generate the images. Several tools will do this for you, but the one I like best is the <a href=\"https://www.responsivebreakpoints.com/\">Responsive Image Breakpoints Generator</a> from Cloudinary. You upload your image, and it will automatically generate a variety of sizes for you. You can tweak the settings to control how many images it generates. Then you can download the images to use.</p>\n<p>Another option is to host your images in a CDN, like <a href=\"https://cloudinary.com/\">Cloudinary</a> or <a href=\"https://www.imgix.com/\">imgix</a>. When using a service like this, you upload the highest-resolution image you have to the CDN, and then you can request resized versions of the image using URL parameters. You don’t have to do any of the work, you just tell the CDN what size you want the image to be rendered at.</p>\n<ul>\n<li><a href=\"https://docs.google.com/spreadsheets/d/1e4qdGEoq7tqDCnY7iSSnl3OFoWkzhRfVAly-73A3uCc/edit#gid=0\">Image Resizing Services and Projects</a></li>\n<li><a href=\"https://www.responsivebreakpoints.com/\">Responsive Image Breakpoints Generator</a></li>\n</ul>\n<h3>What Image Sizes Should I Provide?</h3>\n<p>This is a great question! If you provide too many assets, you’re wasting your time and energy generating them. If you provide too few, then you’re forcing your users to download larger images than they need.</p>\n<p>If you’re dealing with a single image and can provide custom markup for that image, you can use the <a href=\"https://www.responsivebreakpoints.com/\">Responsive Image Breakpoints Generator</a> from Cloudinary. It will automatically examine your image and decide what the optimal set of assets is to provide the best balance between file size and resolution. Then it will not only generate the files, but it will also produce the <code>srcset</code> and <code>sizes</code> attributes for you.</p>\n<div class=\"u-pullSides1 u-md-pullSides6\"><figure class=\"Figure\"><img src=\"https://cloudfour.com/wp-content/uploads/2020/03/standard-array.png\" alt=\"Labeled screenshot of responsive image code example, showing the srcset attribute, pointing out that it includes a standard list of sizes, ranging from 320 to 2560px wide.\" width=\"1920\" height=\"1080\" class=\"size-full wp-image-5776\" srcset=\"https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/03/standard-array.png 1920w, https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/03/standard-array-300x169.png 300w, https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/03/standard-array-1024x576.png 1024w, https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/03/standard-array-768x432.png 768w, https://29comwzoq712ml5vj5gf479x-wpengine.netdna-ssl.com/wp-content/uploads/2020/03/standard-array-1536x864.png 1536w\" sizes=\"(max-width: 1920px) 100vw, 1920px\" /></figure></div>\n<p>If you’re working in a CMS or web app where you don’t know the exact image that will be displayed in a slot, then I recommend picking a standard array of image sizes. In the past, I’ve used <code>320w</code>, <code>640w</code>, <code>960w</code>, <code>1280w</code>, <code>1920w</code>, and <code>2560w</code> because they&#8217;re round numbers that follow a logical progression (multiples of 320). This set covers sizes from mobile to full-bleed desktop.</p>\n<p>However, a standard array of sizes will always be less efficient than a customized one. In this case, while the numbers are logical, there’s a progressively larger filesize increase, because <a href=\"https://cloudfour.com/thinks/responsive-images-101-part-9-image-breakpoints/#memory-usage-influencing-the-distribution-of-image-breakpoints\">when you double the width, you <em>quadruple</em> the pixels</a>. As a result, if you must choose a standard size array, you may want to consider one that has fewer assets at small sizes, and more at larger sizes.</p>\n<p>If you’re hosting your images on Cloudinary, there’s another approach you can use, which is to take advantage of the <a href=\"https://cloudinary.com/documentation/responsive_images?query=responsive&amp;c_query=Responsive%20images#responsive_breakpoint_generator\">Cloudinary API</a> to run the Responsive Image Breakpoints Generator on the images when you upload them! Then you can take the response from the API to dynamically populate your <code>srcset</code> and <code>sizes</code> attributes.</p>\n<h3>What <code>sizes</code> Values Should I Declare?</h3>\n<p>You’ll need to determine what sizes to put in the <code>sizes</code> attribute by looking at your CSS to see how wide the image is displayed at various breakpoints.</p>\n<p>Sometimes this is determined by the width of the image itself:</p>\n<pre><code class=\"language-css\">img {\n  width 320px;\n}\n\n@media screen and (min-width: 37.5em) {\n  width: 640px;\n}\n</code></pre>\n<p>In this case, your image has two fixed sizes, which can be reflected directly in your <code>sizes</code> attribute:</p>\n<pre><code class=\"language-html\">&lt;img\n  alt=\"Ferrari\"\n  src=\"ferrari.jpg\"\n  srcset=\"ferrari-s.jpg 320w,\n          ferrari-m.jpg 960w,\n          ferrari-l.jpg 1920w\"\n  sizes=\"(min-width: 37.5em) 640px, 320px\"&gt;\n</code></pre>\n<p>However, you’ll often find that your image is fluid, and inherits its width from the container:</p>\n<pre><code class=\"language-css\">img {\n  height: auto;\n  width: 100%;\n}\n\n.container {\n  padding: 1rem;\n  width: 100%;\n}\n\n@media screen and (min-width: 37.5em) {\n  .container {\n    width: 50%;\n  }\n}\n</code></pre>\n<p>In this example (assuming <code>.container</code> is the only element that affects the image’s width), you can apply the width of the container to the image. Note that we’re also subtracting the width of the padding from the container width. You may or may not need to do this, depending on how much the padding affects the overall width.</p>\n<pre><code class=\"language-html\">&lt;img\n  alt=\"Ferrari\"\n  src=\"ferrari.jpg\"\n  srcset=\"ferrari-s.jpg 320w,\n          ferrari-m.jpg 960w,\n          ferrari-l.jpg 1920w\"\n  sizes=\"(min-width: 37.5em) calc(50vw - 2rem),\n         calc(100vw - 2rem)\"&gt;\n</code></pre>\n<p>As you can see, this is going to depend greatly on your specific layout. I usually work backward by inspecting the image in my browser’s devtools to work out what breakpoints affect the width of the image.</p>\n<h3>How Can I Check That I Did It Right?</h3>\n<p>As you can imagine, testing whether you got your responsive images code right can be tricky and time-consuming. Thankfully, there’s a tool to make it easy, called the <a href=\"https://ausi.github.io/respimagelint/\">Responsive Image Linter</a>.</p>\n<p>It’s a bookmarklet that you add to your browser and use on your site. When you trigger it, it will automatically scan your page at a variety of different viewport sizes and pixel densities to test your images.</p>\n<p>Then it will give you a report showing every image on your page, and whether they’re properly resizing. If they’re not, it will tell you what’s wrong and even make suggestions for how to fix it.</p>\n<h2>Conclusion</h2>\n<p>As you can see, the combination of the <code>srcset</code> and <code>sizes</code> attribute gives you a lot of bang for your buck. By adding two attributes, you tell the browser, “At this screen size, this image will be this wide, so please choose the best option from this list of images.”</p>\n<p>There’s a lot more power available if you need to do more complicated things such as <a href=\"https://cloudfour.com/thinks/responsive-images-101-part-7-type/\">serving modern image formats like WebP</a> or <a href=\"https://cloudfour.com/thinks/responsive-images-101-part-6-picture-element/\">serving different images at different screen sizes</a>. If you need details on those use cases, I strongly recommend Jason’s <a href=\"https://cloudfour.com/thinks/responsive-images-101-definitions/\">Responsive Images 101</a> series.</p>\n<h2>Learn More:</h2>\n<ul>\n<li><a href=\"https://cloudfour.com/thinks/responsive-images-101-definitions/\">Responsive Images 101</a>, by Jason Grigsby</li>\n<li><a href=\"https://css-tricks.com/responsive-images-youre-just-changing-resolutions-use-srcset/\">If you’re just changing resolutions, use <code>srcset</code></a>, by Chris Coyier</li>\n<li><a href=\"https://css-tricks.com/sometimes-sizes-is-quite-important/\">Sometimes <code>sizes</code> is quite important</a>, by Chris Coyier</li>\n<li><a href=\"https://bitsofco.de/the-srcset-and-sizes-attributes/\">The <code>srcset</code> and <code>sizes</code> attributes</a>, by Ire Aderinokun</li>\n<li><a href=\"https://ericportis.com/posts/2014/srcset-sizes/\"><code>srcset</code> and <code>sizes</code></a>, by Eric Portis</li>\n<li><a href=\"https://alistapart.com/blog/post/article-update-dont-rely-on-default-sizes/\">Don’t Rely on Default <code>sizes</code></a>, by Eric Portis</li>\n<li><a href=\"https://jakearchibald.com/2015/anatomy-of-responsive-images/\">The Anatomy of Responsive Images</a>, by Jake Archibald</li>\n</ul>\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-5773-1\">\nMedia conditions are a subset of media queries. You can&#8217;t specify a media type (like <code>print</code> or <code>screen</code>), but you can use the width-related queries to define breakpoints.&#160;<a href=\"#fnref-5773-1\">&#8617;</a>\n</li>\n</ol>\n</div>\n<p></p>",
      "summary": "The responsive images spec is fantastic and covers a lot of use cases, but most of the time you’ll only need one: resolution switching using the `srcset` and `sizes` attributes.",
      "date_published": "2020-04-02T17:18:08.000Z",
      "author": {
        "name": "Scott Vandehey",
        "url": "https://cloudfour.com/is/scott/",
        "avatar": "https://cloudfour.com/wp-content/uploads/2019/03/scott-128x128-c-default.png"
      }
    },
    {
      "guid": "https://cloudfour.com/?p=5740",
      "url": "https://cloudfour.com/thinks/navigation-for-design-systems-and-style-guides/",
      "image": "https://cloudfour.com/wp-content/uploads/2020/02/design-system-navigation.png",
      "title": "Navigation for Design Systems and Style Guides",
      "content_html": "<figure class=\"Figure\"></p>\n<div class=\"u-pullSides1\"><img class=\"u-block u-sizeFull\" src=\"https://cloudfour.com/wp-content/uploads/2020/02/design-system-navigation.png\" alt=\"Design system navigation\" /></div>\n<p></figure>\n<p>A key part of my job for the past year has been contributing to design systems. To benefit from those contributions though, users need to be able to find them. That’s why it’s not only the content of a design system that’s important but also its usability. Design systems should be easy to navigate, especially as the system grows.</p>\n<p>Design systems vary in size, so the type of navigation that works for one may not work as well for another. However, there are some common solutions. We&#8217;ll be looking at some of these different solutions and when it makes sense to use one over the other.</p>\n<h2>A List</h2>\n<p>The simplest solution is a list. Lists are easy to understand and require little input from the user. Because of this, they are a great choice for smaller design systems.</p>\n<p>There are some best practices for designing a list:</p>\n<ul>\n<li>Grouping navigation items into related sections with concise, descriptive headings improves discoverability.</li>\n<li>It’s also important for the headings and subsequent list items to be distinct. Distinct headings help users to quickly find relevant content without having to read through the entire list.</li>\n<li>The distinction between different sections should also be clear so that sections don’t blur together.</li>\n</ul>\n<p>The <a href=\"https://fishtank.bna.com/\">Fish Tank Design System</a> is a good example of a list-style navigation with clearly organized sections.</p>\n<figure class=\"Figure\"></p>\n<div class=\"u-pullSides1 u-borderSm\"><img class=\"u-block u-sizeFull\" src=\"https://cloudfour.com/wp-content/uploads/2020/02/fishtank-e1581722823832.png\" alt=\"Fish Tank Design System\" /></div>\n<p><figcaption class=\"Figure-caption u-textShrink1\">The Fish Tank Design System uses a single, comprehensive list for its navigation.</figcaption></figure>\n<h2>Primary and Secondary Navigation</h2>\n<p>Even well organized and designed lists can become overwhelming in a large design system. One solution is to break the navigation into primary and secondary navigation groups.</p>\n<p>The primary navigation provides a high-level overview of the design system and is where each section of the design system is listed. The items in the primary navigation often lead to an overview page. Overviews are helpful because they provide insight into the type of content in each section and how that content should be used.</p>\n<p>The secondary navigation includes a list of items specific to a section. In the <a href=\"https://design-system.service.gov.uk/\">GOV.UK Design System</a>, each section has a secondary navigation group. For example, in the components section, the secondary navigation includes a list of components.</p>\n<figure class=\"Figure\"></p>\n<div class=\"u-pullSides1 u-borderSm\"><img class=\"u-block u-sizeFull\" src=\"https://cloudfour.com/wp-content/uploads/2020/02/gov-uk-active-e1581722844143.png\" alt=\"GOV-UK Design System\" /></div>\n<p><figcaption class=\"Figure-caption u-textShrink1\">The GOV-UK Design System includes both primary (upper bar) and secondary (sidebar) navigation.</figcaption></figure>\n<p>Because the navigation is divided, it’s helpful to provide visual cues that indicate where the user is. Using breadcrumbs or adding an “active” class to the current section and page are both good ways to orient the user.</p>\n<h2>Accordions</h2>\n<p>Another solution frequently used by large design systems is an accordion. An accordion is a list of sections that expand and collapse.</p>\n<p>Accordions are useful when a design system has many different sections. In the GOV.UK example mentioned earlier, there were only a handful of items in the primary navigation. In comparison, the <a href=\"https://www.duetds.com/\">Duet Design System</a> has a lot of sections. Even on large screens, it would be hard to fit all these in a horizontal navbar.</p>\n<figure class=\"Figure\"></p>\n<div class=\"u-pullSides1 u-borderSm\"><img class=\"u-block u-sizeFull\" src=\"https://cloudfour.com/wp-content/uploads/2020/02/duet-design-system-e1581722864689.png\" alt=\"Duet Design System\" /></div>\n<p><figcaption class=\"Figure-caption u-textShrink1\">The Duet Design System, each section of the navigation can be expanded or collapsed to show more or less content.</figcaption></figure>\n<p>Page loads and wait times are other important factors to consider. Accordions have an advantage over the primary and secondary navigation solution because they don’t require a page-load to view the content of another section.</p>\n<p>In comparison to the other solutions, accordions are more complex. Because of that, there are some additional behaviors to consider:</p>\n<ul>\n<li>Should sections automatically collapse when another is opened?</li>\n<li>Does each section have a corresponding overview page? If so, how do you link to those?</li>\n</ul>\n<h2>Combining Navigation Patterns</h2>\n<p>The different patterns are often used in combination together. It may make sense to use an accordion-style navigation on small screens where there is less space, but a list-style navigation on large screens when the entire navigation is likely to be visible.</p>\n<p>Shopify’s design system, <a href=\"https://polaris.shopify.com/\">Polaris</a>, has two levels of navigation. The secondary one uses an accordion pattern. The additional level of navigation lets users jump to a specific part of a long page instead of scrolling to find specific information.</p>\n<figure class=\"Figure\"></p>\n<div class=\"u-pullSides1 u-borderSm\"><img class=\"u-block u-sizeFull\" src=\"https://cloudfour.com/wp-content/uploads/2020/02/polaris-e1581722756368.png\" alt=\"Polaris Design System\" /></div>\n<p><figcaption class=\"Figure-caption u-textShrink1\">The Polaris Design System uses an accordion to provide a third level of navigation.</figcaption></figure>\n<h2>Finding a Solution that Works</h2>\n<p>For an organization to benefit from a design system, it needs to be usable. Everyone, from frequent contributors to unfamiliar users, should be able to find content quickly and easily. Many factors can influence what type of navigation works best, but the solutions outlined here are a helpful place to start.</p>\n<p></p>",
      "summary": "A key part of my job for the past year has been contributing to design systems. To benefit from those contributions though, users need to be able to find them. That’s why it’s not only the content of a design system that’s important but also its usability. Design systems should be easy to navigate, especially [&#8230;]",
      "date_published": "2020-02-21T16:35:31.000Z",
      "author": {
        "name": "Danielle Romo",
        "url": "https://cloudfour.com/is/danielle/",
        "avatar": "https://cloudfour.com/wp-content/uploads/2019/03/danielle-128x128-c-default.png"
      }
    },
    {
      "guid": "https://cloudfour.com/?p=5734",
      "url": "https://cloudfour.com/thinks/how-to-publish-an-updated-version-of-an-npm-package/",
      "title": "How to Publish an Updated Version of an npm Package",
      "content_html": "<p>Recently, I’ve been trying to do a bit more open source work, especially in the form of maintaining <a href=\"https://www.npmjs.com/org/cloudfour\">Cloud Four’s npm packages</a>. However, as someone relatively new to the Operations side of things, I found myself getting lost about how exactly to release a new version of a package.<sup id=\"fnref-5734-1\"><a href=\"#fn-5734-1\" class=\"jetpack-footnote\">1</a></sup></p>\n<p>Part of the problem was that these projects were created over many years, with multiple developers involved. Because standards and best practices evolve quickly, each project’s release process was configured differently. Some used a release helper tool like <a href=\"https://www.npmjs.com/package/npmpub\">npmpub</a>, others had <code>prepublish</code> scripts, and others had nothing special at all.</p>\n<p>None of this is bad, and I’m not trying to shame any other devs, but it did increase friction. Releasing a new version of any package was a little harder than it needed to be, since I had to figure out what process to use for each.</p>\n<p>So I recently spent some time reading the npm docs and familiarizing myself with some of the most common release helper tools. I wanted get a better handle on what’s typically involved in the npm release process.</p>\n<p>In this article, I’ll cover the most common release steps, how to determine the release process for an existing project, and recommendations for project maintainers.</p>\n<ol>\n<li><a href=\"#the-standard-release-process\">The “Standard” Release Process</a></li>\n<li><a href=\"#determining-how-to-release-an-existing-project\">Determining How to Release an Existing Project</a></li>\n<li><a href=\"#recommendations-for-project-maintainers\">Recommendations for Project Maintainers</a></li>\n<li><a href=\"#resources\">Resources</a></li>\n</ol>\n<h2>The “Standard” Release Process</h2>\n<p>Here is my understanding of the steps that are most commonly expected to be run when publishing a new version of an npm package.</p>\n<ol>\n<li>Safety Checks:\n<ol>\n<li><code>git pull</code></li>\n<li><code>git status</code></li>\n<li><code>npm ci</code></li>\n<li><code>npm test</code></li>\n</ol>\n</li>\n<li>Prepare the Release:\n<ol>\n<li><code>npm run build</code></li>\n</ol>\n</li>\n<li>Update the Changelog</li>\n<li>Update the Version Number:\n<ol>\n<li><code>npm version</code></li>\n<li>Or by hand:\n<ol>\n<li>Update version in <code>package.json</code> &amp; <code>package-lock.json</code></li>\n<li><code>git commit -am '2.0.0'</code></li>\n<li><code>git tag v2.0.0</code></li>\n</ol>\n</li>\n</ol>\n</li>\n<li>Publish to npm:\n<ol>\n<li><code>npm publish</code></li>\n</ol>\n</li>\n<li>Publish to Git:\n<ol>\n<li><code>git push</code></li>\n<li><code>git push --tags</code></li>\n</ol>\n</li>\n<li>Create a GitHub Release (optional)</li>\n</ol>\n<h3>1. Safety Checks</h3>\n<p>The following steps are optional, but could save you a lot of trouble having to publish a bug fix after a bad release.</p>\n<pre><code>git pull\n</code></pre>\n<p>Check that you’re working on the <code>master</code> branch (or the branch you publish from), and ensure you’re not missing any commits from the repo.</p>\n<pre><code>git status\n</code></pre>\n<p>Confirm that you’ve got a clean working directory. You don’t want to see any uncommitted changes.</p>\n<pre><code>npm ci\n</code></pre>\n<p>The <code>ci</code> command will run a clean install of your Node modules, so you can validate that the versions you specify install cleanly.</p>\n<pre><code>npm test\n</code></pre>\n<p>If you have tests or linters, run them now, to make sure you don’t have any release-blocking problems in your code.</p>\n<div class=\"u-bgGray u-pad1 u-pullSides1 u-spaceItems1\"><p><strong>Note:</strong> It’s common to add some or all of these steps into a <code>preversion</code> or <code>prepublishOnly</code> script in <code>package.json</code>. <a href=\"https://docs.npmjs.com/misc/scripts\">These scripts</a> will be automatically run before the <code>npm version</code> or <code>npm publish</code> commands respectively. This will ensure that nobody forgets to run them.</p></div>\n<h3>2. Prepare the Release</h3>\n<p>If your package includes any resources that need to be compiled, now’s the time to run your build steps.</p>\n<pre><code>npm run build\n</code></pre>\n<p>This is the most common compile command, but your package may be configured differently. Check the documentation!</p>\n<div class=\"u-bgGray u-pad1 u-pullSides1 u-spaceItems1\"><p><strong>Note:</strong> If a build is required for your package, it’s a  very good idea to add the build step to a <a href=\"https://docs.npmjs.com/misc/scripts\"><code>prepublishOnly</code> script</a>. That way you can avoid the embarrassing situation of someone publishing a new version that doesn’t actually contain the new code.</p></div>\n<h3>3. Update the Changelog</h3>\n<p>I feel very strongly that every project should <a href=\"https://keepachangelog.com/\">keep a changelog</a>. It allows users to see what noteworthy changes were made between releases, so it should be updated every time you publish a new version.</p>\n<p>If your project already has a changelog, add a new entry for the version you’re about to publish. Follow the existing style, and remember that <a href=\"https://keepachangelog.com/en/1.0.0/#how\">changelogs are for humans</a>, not machines. List what changed with this release, and why, with special attention paid to deprecations and breaking changes.</p>\n<p>If your project doesn’t use a changelog, or prefers GitHub Releases (see below), consider adding one as part of this release. It’s never too late!</p>\n<h3>4. Update the Version Number</h3>\n<p>The easiest way to update your version number is to use the handy <a href=\"https://docs.npmjs.com/cli/version.html\"><code>npm version</code></a> command. This will automatically update the version number in <code>package.json</code> and <code>package-lock.json</code>. It will also create a version commit and a new Git tag.</p>\n<p>You’ll need to tell npm what type of release this is by specifying a valid <a href=\"https://semver.org/\">semantic versioning</a> type, such as <code>major</code>, <code>minor</code>, or <code>patch</code>. Then npm will update the appropriate part of your version number:</p>\n<pre><code>npm version minor\n</code></pre>\n<p>You could do this all by hand, if you prefer. For example, here’s what you would do for a minor release from version 2.0.0:</p>\n<ol>\n<li>Update the version number to 2.1.0 in <code>package.json</code> &amp; <code>package-lock.json</code>.</li>\n<li>Commit the changes you just made: <code>git commit -am 'Bump version to 2.1.0'</code></li>\n<li>Make a new Git tag: <code>git tag v2.1.0</code></li>\n</ol>\n<p>However, an advantage of using <code>npm version</code> is you can configure it to run additional commands. Add a <a href=\"https://docs.npmjs.com/misc/scripts\"><code>preversion</code> or <code>postversion</code> script</a> to <code>package.json</code> with the commands you’d like to run before or after bumping the version.</p>\n<p>For example, you could run the safety checks mentioned above in a <code>preversion</code> script so npm will only bump the version if the tests pass.</p>\n<h3>5. Publish to npm</h3>\n<p>Finally, once you’re confident this version is ready to release, you can <a href=\"https://docs.npmjs.com/cli/publish\">publish the updated package to npm</a>.</p>\n<pre><code>npm publish\n</code></pre>\n<p>The <code>publish</code> command will add the updated package to the npm registry.</p>\n<h3>6. Publish to Git</h3>\n<p>You’ll also want to make sure your changes are promoted to the Git repo.</p>\n<pre><code>git push\n</code></pre>\n<p>Unfortunately, the <code>push</code> command doesn’t send tags. To push the new tag you made, you’ll need to run the <code>push</code> command again with the <code>--tags</code> flag:</p>\n<pre><code>git push --tags\n</code></pre>\n<div class=\"u-bgGray u-pad1 u-pullSides1 u-spaceItems1\"><p><strong>Note:</strong> It can be a good idea to add these commands to a <a href=\"https://docs.npmjs.com/misc/scripts\"><code>postpublish</code> script</a>, so that when someone releases code to npm, it’s automatically merged to Git at the same time.</p></div>\n<h3>7. Create a GitHub Release (optional)</h3>\n<p><a href=\"https://help.github.com/en/github/administering-a-repository/about-releases\">GitHub Releases</a> are a proprietary feature that GitHub built on top of standard Git tags. They allow you to attach release notes to a tag.</p>\n<p>I recommend that you copy the changes you made to the changelog earlier as the notes for your GitHub Release.</p>\n<p>Some devs prefer GitHub Releases over maintaining a dedicated changelog file. However, <a href=\"https://keepachangelog.com/en/1.0.0/#github-releases\">there are some downsides</a> to this approach. Releases only exist in the GitHub web interface and are not very easy to discover. They are also a GitHub-only feature, so if you ever migrate to another version control provider, you’ll lose your release history.</p>\n<p>Of course, <a href=\"https://knowyourmeme.com/memes/why-not-both-why-dont-we-have-both\">there’s no reason you can’t use both!</a></p>\n<h3>That Seems Like a Lot of Work!</h3>\n<p>No kidding! Judging by the many tools designed to help with releases, lots of devs feel the same way. Some of the most popular include <a href=\"https://semantic-release.gitbook.io/semantic-release/\">semantic-release</a>, <a href=\"https://www.npmjs.com/package/release-it\">release-it</a>, <a href=\"https://github.com/sindresorhus/np\">np</a>, <a href=\"https://www.npmjs.com/package/npmpub\">npmpub</a>, and <a href=\"https://github.com/fabiospampinato/bump\">bump</a>.</p>\n<p>Each tool addresses some of the pain points in the release process. You should evaluate helper tools carefully before deciding to add any to your process. Be aware that while a tool may automate some of the process, you’ll need to add clear documentation explaining how to use it, ideally in a <a href=\"https://help.github.com/en/github/building-a-strong-community/setting-guidelines-for-repository-contributors\">contributing guide</a>.</p>\n<p>There’s no clear industry standard, and many projects don’t have documented release procedures. This can make figuring out how to publish a new version tricky in a project you’re not familiar with.</p>\n<p>Which brings us to the next topic:</p>\n<h2>Determining How to Release an Existing Project</h2>\n<p>Now that we have a good understanding of the typical release steps, let’s talk about how to evaluate an existing project to determine what release process it uses.</p>\n<h3>1. Check the <code>README</code> and <code>CONTRIBUTING</code> Files</h3>\n<p>Start by looking at the <code>README</code> file. You’re not likely to find the release process here, because it’s intended for users, not contributors. However, there may be a link to a contributing guide.</p>\n<p>If there isn’t, check for a <code>CONTRIBUTING.md</code> file. Most projects keep this in the root folder, but some move it to a <code>docs</code> folder or even the <code>.github</code> folder.</p>\n<p>If you can’t find a contributing guide, or if it doesn’t document the release process, it’s time for the next step.</p>\n<h3>2. Ask Other Project Members</h3>\n<p>Someone has been handling releases before you. See if you can get in touch with the team and ask if anyone knows about the release process.</p>\n<p>If you’re unsure who to ask, look at the commit history to see who’s name is on the last commit that bumped the version number.</p>\n<p>If no one knows, or if you can’t get in touch with previous releasers, then it’s time for some detective work.</p>\n<h3>3. Look for Scripts in <code>package.json</code></h3>\n<p>Start by looking in <code>package.json</code> for the <code>scripts</code> section. See if any of the scripts seem relevant.</p>\n<p>Sometimes you’ll find a <code>release</code> or <code>publish</code> script that runs a release helper tool. If so, then you’ll want to try using this for releasing.</p>\n<p>Or you might find some of the <a href=\"https://docs.npmjs.com/misc/scripts\">publishing lifecycle scripts</a>, like <code>preversion</code>, <code>postversion</code>, <code>prepublishOnly</code>, or <code>postpublish</code>. If so, that’s a good indication that you’ll use the standard process outlined above, including the <code>npm version</code> and <code>npm publish</code> commands.</p>\n<h3>4. If All Else Fails, Follow the “Standard” Release Process</h3>\n<p>If you can’t find any documentation, and nothing indicates there’s anything custom about the release process, then you can follow the “standard” process outlined above.</p>\n<p>Once you manage to get a successful release, it’s time to start thinking about the future. How can you improve the process for this project?</p>\n<h2>Recommendations for Project Maintainers</h2>\n<p>Here are some things you can do to make it easier for new contributors to understand how to release a new version of your project.</p>\n<h3>Document Your Release Process in a Contributing Guide</h3>\n<p>It’s a good idea to add a contributing guide to your project, so that new contributors can learn anything they need to know about how to work on it. That includes the release process.</p>\n<p>GitHub has a <a href=\"https://help.github.com/en/github/building-a-strong-community/setting-guidelines-for-repository-contributors\">good introduction to adding a contributing guide</a>. Typically, this lives in a <code>CONTRIBUTING.md</code> file to make it easy to find. If you put it anywhere other than the root folder, considering adding a link in the <code>README</code> as well.</p>\n<h3>Document Your Release Helper Tools</h3>\n<p>Helper tools are great, but don’t assume that every contributor will be familiar with them. At the very least, add a link to the tool’s documentation from your contributing guide. Even better, explain exactly what steps you expect contributors to follow when using the tool.</p>\n<p>For example, if you’re using a release tool that automates the process of updating the changelog, the contributing guide should explain what the result should look like and what a contributor using the tool can expect.</p>\n<h3>Choose Release Helper Tools Carefully</h3>\n<p>In general, there’s a trade-off between a tool that abstracts some of the work away from contributors, and the extra overhead of those contributors having to learn how to use it.</p>\n<p>If your team has more inexperienced contributors, a multiple-step release process could intimidate them or cause them to hesitate to release a new version. In this case, a helper tool might make things easier by reducing the number of steps they need to follow, and ensure they don’t skip a step by mistake.</p>\n<p>On the other hand, if your team is mostly experienced open-source contributors, a release tool holding their hand might seem more annoying than helpful. In that case, limiting your helpers to a simple <code>preversion</code> or <code>prepublishOnly</code> script might make things easier, by hewing closer to the “standard” release process.</p>\n<p>In the end, the best release process is the one that suits your team.</p>\n<h2>Resources</h2>\n<ul>\n<li><a href=\"https://www.freecodecamp.org/news/how-to-make-a-beautiful-tiny-npm-package-and-publish-it-2881d4307f78/\">How to make a beautiful, tiny npm package and publish it</a></li>\n<li><a href=\"https://egghead.io/lessons/javascript-releasing-a-version-to-github\">Releasing a new version to GitHub</a></li>\n<li><a href=\"https://egghead.io/lessons/javascript-releasing-a-new-version-to-npm\">Releasing a new version to npm</a></li>\n<li><a href=\"https://egghead.io/lessons/javascript-automating-releases-with-semantic-release\">Automating releases with semantic-release</a></li>\n<li><a href=\"https://blog.npmjs.org/post/184553141742/easy-automatic-npm-publishes\">Easy automatic npm publishes</a></li>\n<li><a href=\"https://hackernoon.com/these-6-essential-tools-will-maintain-your-npm-modules-for-you-4cbbee88e0cb\">These 6 essential tools will release, version, and maintain your NPM modules for you</a></li>\n<li><a href=\"https://zellwk.com/blog/publish-to-npm/\">How to publish packages to npm (the way the industry does things)</a></li>\n<li><a href=\"https://auth0.com/blog/developing-npm-packages/\">Learn how to develop and publish an npm package</a></li>\n<li><a href=\"https://medium.com/@the1mills/how-to-test-your-npm-module-without-publishing-it-every-5-minutes-1c4cb4b369be\">How to test your new NPM module without publishing it every 5 minutes</a></li>\n</ul>\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-5734-1\">\nAs an aside, until recently, I mistakenly used the words <a href=\"https://docs.npmjs.com/about-packages-and-modules\">packages and modules</a> interchangeably. A <strong>package</strong> is a file or directory that is described by a <code>package.json</code> file. A <strong>module</strong> is any file or directory (typically found in the <code>node_modules</code> directory) that can be loaded by the Node <code>require()</code> function. So the npm registry contains <em>packages</em>, many of which contain Node <em>modules</em>.&#160;<a href=\"#fnref-5734-1\">&#8617;</a>\n</li>\n</ol>\n</div>\n<p></p>",
      "summary": "What’s typically involved in an npm version release? How can you determine the release process for an existing project? Can project maintainers do anything to make it easier for new contributors?",
      "date_published": "2020-02-10T21:29:28.000Z",
      "author": {
        "name": "Scott Vandehey",
        "url": "https://cloudfour.com/is/scott/",
        "avatar": "https://cloudfour.com/wp-content/uploads/2019/03/scott-128x128-c-default.png"
      }
    },
    {
      "guid": "https://cloudfour.com/?p=5718",
      "url": "https://cloudfour.com/thinks/what-flushing-toilets-taught-me-about-web-design/",
      "image": "https://cloudfour.com/wp-content/uploads/2020/02/Sharing-Image.png",
      "title": "What Flushing Toilets Taught Me About Web Design",
      "content_html": "<div class=\"u-bgGray u-pad1 u-pullSides1 u-spaceItems1 u-textGrow1\"><p>\n  I recently traveled through Europe and re-learned an old design lesson from the humble toilet flusher.\n</p></div>\n<p>Traditionally, toilets had a single control to worry about: the flusher. Some toilets put the flusher on the side of the tank. Others put it on the front of the tank. Some even had a pull cord or a foot pedal.</p>\n<p>Regardless of where the flusher was located, the mental model was the same: there was one task you were attempting to achieve (flush) and only one control for you to interact with. It may take a minute to find the flusher, but once you did you could be pretty confident you were using it correctly.</p>\n<h2>Introducing Dual Flush</h2>\n<p>This began to change in 1960, when <a href=\"https://en.wikipedia.org/wiki/Dual_flush_toilet\">a Japanese company called TOTO designed the first dual flush toilet</a>. For hundreds of years people had been using single flush toilets, but as toilets became more prevalent and resources became more scarce, an old constraint became more and more important: toilets use a <em>ton</em> of water.</p>\n<p>The exact numbers vary, but depending on how a toilet is being used, a standard flush is often more water than necessary. Dual flush toilets work around this by giving the user an option: they can choose the standard flush or a smaller flush. This allows more control over how much water is used and how much is conserved. The dual-flush toilet is now universally adopted in many countries, and I saw them frequently in Europe.</p>\n<h2>A Yankee Goes to the Loo</h2>\n<p>This is a big win for water conservation, but there&#8217;s a problem: the flushing controls are confusing! These toilets have started to be introduced in the US, but they&#8217;re still not common, and trying them out in Europe I was often confused about how to trigger the correct flush. There are a variety of designs, some of which are clearer than others.</p>\n<div class=\"u-pullSides1 u-md-pullSides6\">\n  <figure class=\"Figure\">\n    <img src=\"https://cloudfour.com/wp-content/uploads/2020/02/main-variations-alt.png\" alt=\"Four different combinations of small and large buttons.\">\n  <figcaption class=\"Figure-caption u-textShrink1\">A few common dual flusher button designs.</figcaption></figure>\n</div>\n<p>Unfortunately, the most common design I saw was one of the most confusing. It uses two buttons overlaid inside a circle. The specific size and placement of these two buttons varies considerably, but generally the larger button flushes more water, while the smaller button flushes less.</p>\n<div class=\"u-pullSides1 u-md-pullSides6\">\n  <figure class=\"Figure\">\n    <img src=\"https://cloudfour.com/wp-content/uploads/2020/02/sub-variations-alt.png\" alt=\"Six sets of flush controls. Each one is a circle containing two buttons of different shapes.\">\n  <figcaption class=\"Figure-caption u-textShrink1\">A handful of variations on this design that I've seen.</figcaption></figure>\n</div>\n<p>This makes sense once you&#8217;re used to the concept, but it isn&#8217;t obvious if you&#8217;re not. Even once you understand the different sizes of buttons, these can still be confusing:</p>\n<ul>\n<li>You&#8217;re often comparing the size of two different shapes: for example, a crescent vs. a circle. This can be tricky to do at a glance if they&#8217;re similarly sized.</li>\n<li>Sometimes the smaller button is narrower than your fingertip.</li>\n<li>Sometimes clicking one of the buttons presses both down at once.</li>\n</ul>\n<h2>Fixing the Flusher</h2>\n<p>This overlaid button design looks elegant but can make these toilets tricky to understand and use. This is a classic case of form over function, where the visual design of something is prioritized over usability. By making a few simple changes, we can make it clearer for users unfamiliar with the design.</p>\n<ul>\n<li><strong>Add icons:</strong> Icons can add visual meaning to the buttons. For example, <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f4a7.png\" alt=\"💧\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> vs <img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f4a7.png\" alt=\"💧\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /><img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f4a7.png\" alt=\"💧\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /><img src=\"https://s.w.org/images/core/emoji/12.0.0-1/72x72/1f4a7.png\" alt=\"💧\" class=\"wp-smiley\" style=\"height: 1em; max-height: 1em;\" /> clearly symbolizes the difference in water used.</li>\n<li><strong>Add words:</strong> Words add even more meaning but are harder to translate. Numbers and common unit abbreviations (e.g. &#8220;6L&#8221; vs &#8220;2L&#8221;) are more likely to translate across languages. (I&#8217;m not sure how much water is actually used to flush.)</li>\n<li><strong>Space out the buttons:</strong> Adding space between buttons makes it easier to press one without pressing the other.</li>\n<li><strong>Make the buttons bigger:</strong> The small button could be difficult to tap. It should be <em>at least</em> as wide and tall as a finger tip. Probably bigger.</li>\n<li><strong>Make both buttons circles:</strong> Shape can convey meaning, but it&#8217;s not clear what the different shapes mean here. We should remove differences that don&#8217;t convey meaning, since they can be distracting.</li>\n</ul>\n<h2>The Final Flusher</h2>\n<div class=\"u-pullSides1 u-md-pullSides6\">\n  <figure class=\"Figure\">\n    <img src=\"https://cloudfour.com/wp-content/uploads/2020/02/Flusher-Framed-2.png\" alt=\"Two circular buttons next to each other. The larger button has three water droplets and the text '6L'. The smaller button has a single droplet and the text '2L'.\">\n  </figure>\n</div>\n<p>By applying these design changes we can create a much easier to understand toilet flusher. I&#8217;ve seen some flushers incorporate some of these changes, but haven&#8217;t seen any that incorporate all of them.</p>\n<h2>What does this have to do with the web?</h2>\n<p>This post started out as a rant to my girlfriend about the toilet in our short term rental flat, but as we chatted I realized I was talking about a lot of the same design challenges I deal with at work. By <a href=\"https://www.nngroup.com/articles/icon-usability/\">using words and icons together</a>, <a href=\"https://www.nngroup.com/articles/touch-target-size/\">putting space between interactive elements and applying minimum touch sizes</a>, and <a href=\"https://www.smashingmagazine.com/2016/09/reducing-cognitive-overload-for-a-better-user-experience/\">removing unnecessary distractions</a> we can make the interfaces we design easier to understand and use.</p>\n<p>When you&#8217;re designing a tool someone needs to use — whether it&#8217;s a toilet flusher or a checkout form — make it elegant. But more importantly, make it easy to use and understand.</p>\n<p></p>",
      "summary": "I re-learned an old design lesson from the humble toilet flusher. As new features are added to existing technologies, careful design is required to make their usage clear.",
      "date_published": "2020-02-06T16:22:05.000Z",
      "author": {
        "name": "Paul Hebert",
        "url": "https://cloudfour.com/is/paul/",
        "avatar": "https://cloudfour.com/wp-content/uploads/2019/09/paul-128x128-c-default.png"
      }
    },
    {
      "guid": "https://cloudfour.com/?p=5712",
      "url": "https://cloudfour.com/thinks/tiny-web-stacks/",
      "image": "https://cloudfour.com/wp-content/uploads/2020/02/tiny-web-stacks-r2.png",
      "title": "Tiny Web Stacks",
      "content_html": "<div class=\"u-pullSides1\"><img src=\"https://cloudfour.com/wp-content/uploads/2020/02/tiny-web-stacks-r2.png\" alt=\"A small stack of pancakes with butter and syrup on a plate\"></div>\n<p>A lot of my day to day work involves design systems. These can get <a href=\"https://cloudfour.com/thinks/cooperative-design-systems/\">pretty complex</a>, with <a href=\"https://cloudfour.com/thinks/tips-for-portable-patterns/\">a lot of moving parts</a>. Perhaps as a reaction to that, I&#8217;ve grown to love small, simple tech stacks for those occasional side projects, micro-sites and one-off experiments that don&#8217;t demand as many features or justify such diligent maintenance.</p>\n<p>These projects usually start the same way. Once I&#8217;ve sketched my idea and have a sense of what I want to do, I create a folder and <a href=\"https://docs.npmjs.com/creating-a-package-json-file\">a <code>package.json</code> file</a> so I can install and manage dependencies:</p>\n<pre><code>mkdir new-project\ncd new-project\nnpm init -y\n</code></pre>\n<p>Which dependencies I install depends on the project. If I&#8217;m building a single-page app, I might use <a href=\"https://parceljs.org/\">Parcel</a>, which gives me Sass support, JavaScript bundling, a local development server and a bunch of other features with no configuration:</p>\n<pre><code>npm i --save parcel-bundler\ntouch index.html main.scss app.js\nnpx parcel index.html\n</code></pre>\n<p>But if my project involves multiple pages or a lot of templating needs, I&#8217;m more likely to set it up with <a href=\"https://www.11ty.dev/\">Eleventy</a>. This takes the same number of steps:</p>\n<pre><code>npm i --save @11ty/eleventy\ntouch index.md subpage.md\nnpx @11ty/eleventy --serve\n</code></pre>\n<p>Projects that go well will naturally grow more complex. But there&#8217;s something to be said for starting simple.</p>\n<p></p>",
      "summary": "When it comes to side projects, micro-sites and one-off experiments, you don't need much to get started.",
      "date_published": "2020-02-05T16:47:06.000Z",
      "author": {
        "name": "Tyler Sticka",
        "url": "https://cloudfour.com/is/tyler/",
        "avatar": "https://cloudfour.com/wp-content/uploads/2017/06/tyler-128x128-c-default.png"
      }
    },
    {
      "guid": "https://cloudfour.com/?p=5709",
      "url": "https://cloudfour.com/thinks/auto-update-js-dependencies/",
      "title": "How to Automatically Update Your JavaScript Dependencies",
      "content_html": "<div class=\"u-bgGray u-pad1 u-pullSides1 u-spaceItems1 u-textGrow1\"><p>One frustrating aspect of the modern JavaScript ecosystem is keeping all your dependencies up to date. Thankfully, there are automated tools that can handle this thankless task for you.</p></div>\n<p>If you need a good reason to keep your dependencies updated, consider the security of your project. For example, <a href=\"https://snyk.io/blog/snyk-research-team-discovers-severe-prototype-pollution-security-vulnerabilities-affecting-all-versions-of-lodash/\">in 2019 a critical vulnerability was discovered in lodash</a>, a library used by over 4 million projects on GitHub. If your project uses <a href=\"https://lodash.com/\">lodash</a>, and you didn’t update, you could have a security problem you don’t even know about.</p>\n<p>There are other reasons as well, including compatibility with other libraries. By default when you install an npm module, it says to use <em>at least</em> the version that you installed. But it doesn’t stop developers from using newer versions as they are released. This can cause problems if a newer version contains breaking changes.</p>\n<p>Although it’s a good practice, updating dependencies takes time and effort and is a relatively thankless job. In other words, it’s a perfect target for automation!</p>\n<p>There are several tools to handle this, including <a href=\"https://renovate.whitesourcesoftware.com/\">Renovate</a>, <a href=\"https://greenkeeper.io/\">Greenkeeper</a>, and <a href=\"https://dependabot.com/\">Dependabot</a>. This article is going to focus on Renovate, because it was enthusiastically recommended by a coworker who’s a bit of a stickler for workflow tools. However, I’ve also used Greenkeeper, and they all work in roughly the same way.</p>\n<p>Renovate constantly monitors the dependencies in your project. When a new version of a dependency is released, it opens a Pull Request (PR) to upgrade to the new version. Then you decide whether or not to merge the PR. You can even configure Renovate to <a href=\"https://docs.renovatebot.com/noise-reduction/#automerging\">automatically merge</a> certain types of updates!</p>\n<p>By reducing the friction associated with dependency updates, Renovate makes it more likely that updates are applied in a timely fashion.</p>\n<h2>1. Add the Renovate GitHub App</h2>\n<p>The first step is to add Renovate to your stack. They offer integrated apps for <a href=\"https://github.com/marketplace/renovate\">GitHub</a> and <a href=\"https://gitlab.com/renovate-bot\">GitLab</a>, and even a <a href=\"https://www.npmjs.com/package/renovate\">self-hosted CLI tool</a>. Follow the directions to install the app, and then choose which Git repos you want to monitor.</p>\n<p>Renovate will check your repo for a package manager config file, such as <code>package.json</code>. If it finds one it understands, it will open a PR to configure Renovate for your project.</p>\n<h2>2. Approve the Onboarding Pull Request</h2>\n<p>Once installed, the first PR that Renovate sends to your project is a minimal set of changes to add the Renovate configuration file.</p>\n<p><a href=\"https://github.com/cloudfour/core-hbs-helpers/pull/62\">Here’s an example of the onboarding PR</a>. The description does an excellent job of letting you know how Renovate will be configured and what to expect after it’s merged.</p>\n<p>Renovate starts you off with a reasonable set of defaults. However, if you want to change anything (for example, to limit when or how many PRs it can open per day), you can edit the Renovate config file on the branch before merging.</p>\n<p>In terms of what to expect next, our project was a bit behind on some dependency versions, so it let me know it would open several PRs to update those. You&#8217;re likely to see something similar.</p>\n<h2>3. Add the Renovate Badge (Optional)</h2>\n<blockquote><p>\n  We need to talk about your flair… You do want to express yourself, don’t you?\n</p></blockquote>\n<p>If you’d like, you can add a badge to your <code>README</code> file so visitors know you’re keeping your dependencies up to date.</p>\n<p>Copy and paste the <a href=\"https://github.com/renovatebot/renovate/issues/534\">following code</a> to the top of your <code>README</code> file, being sure to replace the user name and repo name.</p>\n<pre><code class=\"language-markdown\">[![Renovate Status](https://badges.renovateapi.com/github/username/your-repo-name)](https://renovatebot.com/)\n</code></pre>\n<p>When you’re done, there should be a nice green badge at the top of your repo’s landing page, just like this one:</p>\n<p><a href=\"https://renovatebot.com/\"><img src=\"https://badges.renovateapi.com/github/cloudfour/stylelint-config-cloudfour\" alt=\"Renovate Status\" /></a></p>\n<h2>4. Update Your Continuous Integration Configuration (Optional)</h2>\n<p>If you use a Continuous Integration (CI) tool like <a href=\"https://travis-ci.org/\">Travis</a> or <a href=\"https://circleci.com/\">Circle CI</a>, you may need to update the CI config file to work with Renovate’s branches.</p>\n<p>For example, some of our projects use CI to automatically run tests on PRs. But we don’t want it to run on every commit to every branch, so it’s restricted to the <code>master</code> branch.</p>\n<p>To allow tests to run for Renovate PRs, you’ll need to whitelist the Renovate branch name. Here’s what that looks like in a <code>travis.yml</code> file:</p>\n<pre><code class=\"language-yaml\"># Trigger a push build on master and renovate branches + PRs build on every branches\n# Avoid double build on PRs (See https://github.com/travis-ci/travis-ci/issues/1147)\nbranches:\n only:\n - master\n - /^renovate.*$/\n</code></pre>\n<h2>5. Review the New Batch of Pull Requests</h2>\n<p>Shortly after merging the onboarding PR, you should see some more PRs opened: One to pin your dependencies, and possibly more to update any out-of-date dependencies.</p>\n<p>Earlier I mentioned the problem with npm allowing developers to use newer versions of a dependency than what you required. Pinning your dependencies means changing your list to require a specific version.</p>\n<p><a href=\"https://docs.renovatebot.com/dependency-pinning/\">Pinning dependencies is a complex topic</a>, but I would argue that in most cases, it’s a good idea because it makes it more explicit what versions your project has been tested with.</p>\n<p>Renovate may also open several PRs to update your dependencies to the most recent versions. How many PRs you get depends on how up-to-date your project is.</p>\n<p>One nice touch — you don’t need to delete the branches for all these PRs. Renovate will clean up after itself a few minutes after the PR is merged!</p>\n<h3>How to Review a Dependency Update Pull Request</h3>\n<p>Deciding whether to merge a dependency update PR is going to depend on how you want to test the update. If your project is a simple npm module with good test coverage, you might be happy to approve if all the tests pass.</p>\n<p>On the other hand, if your project is a more complicated app, or you’re not confident the tests cover everything, you may need to check out the branch and test manually.</p>\n<p>For web apps, if you’re using a tool like <a href=\"https://www.netlify.com/blog/2016/07/20/introducing-deploy-previews-in-netlify/\">Netlify Deploy Previews</a>, you may have a preview environment that automatically builds for each PR, in which case you can just test there until you’re confident everything is working.</p>\n<p>One useful bit of information that can inform this decision is the new version number of the updated dependency. Most npm packages follow the <a href=\"https://semver.org/\">Semantic Versioning</a> rule: Major.Minor.Patch. So upgrading from 12.0.0 to 12.0.1 would be a patch release, while upgrading to 13.0.0 would be a major release.</p>\n<p>As a rule of thumb, minor and patch releases are not supposed to contain breaking changes, so they’re more likely to be safe to merge. Conversely, if you see a major version change, you should be prepared to test more rigorously.</p>\n<h3>What if the Dependency Update Breaks Something?</h3>\n<p>If the tests on the PR don’t pass, or if your testing reveals a problem, then you’ll need to find a way to fix the issue before merging. You can check out the PR branch locally, make any changes necessary, and then push your changes to the branch.</p>\n<p>The Renovate PR will usually include a “<a href=\"https://github.com/cloudfour/stylelint-config-cloudfour/pull/53\">Release Notes</a>” section that pulls from the dependency’s changelog. Reading these notes can be helpful when figuring out what changes you might need to make.</p>\n<h2>6. Update Your Project’s Version (Optional)</h2>\n<p>There’s <a href=\"https://github.com/semver/semver/issues/148\">no clear answer</a> for when to bump the version number of your project with regards to dependency updates.</p>\n<p>The main thing to consider is that your project’s version number tells your users when things have changed. Do your users care about every dependency update?</p>\n<p>For example, unless you’re releasing an ESLint plugin, your users likely don’t care if the version of ESLint your project consumes is updated.</p>\n<p>The guideline we’ve been following is to make a major point release of a project if a dependency has a major point release. If a dependency has a non-breaking minor release, we typically don’t bother updating our version number. That may not make sense for your project, so consult with your team about how you’d like to handle this.</p>\n<h2>Congratulations!</h2>\n<p>You’ve solved a time-consuming problem with automation! Go get yourself a treat as you watch the dependency update PRs roll in!</p>\n<p></p>",
      "summary": "One frustrating aspect of the modern JavaScript ecosystem is keeping all your dependencies up to date. Thankfully, there are automated tools that can handle this thankless task for you.",
      "date_published": "2020-01-30T18:57:25.000Z",
      "author": {
        "name": "Scott Vandehey",
        "url": "https://cloudfour.com/is/scott/",
        "avatar": "https://cloudfour.com/wp-content/uploads/2019/03/scott-128x128-c-default.png"
      }
    },
    {
      "guid": "https://cloudfour.com/?p=5698",
      "url": "https://cloudfour.com/thinks/spoiled-by-the-web/",
      "image": "https://cloudfour.com/wp-content/uploads/2020/01/disappearing-app.png",
      "title": "Spoiled by the Web",
      "content_html": "<div class=\"u-pullSides1\"><img src=\"https://cloudfour.com/wp-content/uploads/2020/01/disappearing-app.svg\" alt=\"\"></div>\n<p>I&#8217;m not a fan of &#8220;web versus native&#8221; debates. I think web apps and native apps <a href=\"https://cloudfour.com/thinks/progressive-web-apps-simply-make-sense/\">can be complimentary</a>: I use both every day. And while the web is my current area of focus, it wasn&#8217;t always that way, and occasionally I still find time for <a href=\"https://cloudfour.com/thinks/rasterizing-svg-animations/\">a native side project</a>.</p>\n<p>But I&#8217;ll admit to feeling a bit <em>spoiled</em> by the web whenever I pop back into the native app world. That may seem surprising, given the web dev community&#8217;s reputation for fair-weather frameworks and increasingly complex build processes. Here&#8217;s a story explaining what I mean…</p>\n<p><img src=\"https://cloudfour.com/wp-content/uploads/2020/01/overreactions-bubble.jpg\" alt=\"A photo sent via iMessage of the author with stickers of a silly face, fez and bowtie placed over the top in humorous fashion\" class=\"u-sm-floatRight u-sm-size1of2 u-md-size1of3 u-sm-spaceLeft1 u-lg-pullRight3\"></p>\n<p>Back in 2016, I made an iMessage app called <a href=\"https://apps.apple.com/us/app/overreactions/id1161269734\">Overreactions</a>. Actually, the term &#8220;app&#8221; is probably generous: It&#8217;s a collection of static and animated silly faces you can goof around with in iMessage. Its &#8220;development&#8221; involved many PNGs but zero lines of code.</p>\n<p>Just before the 2019 holidays, I received an email from Apple notifying me that the app &#8220;does not follow one or more of the App Store Review Guidelines.&#8221; I signed in to Apple&#8217;s Resource Center, where it elaborated that the app had gone too long without an update. There were no greater specifics, no broken rules or deprecated dependencies, they just wanted <em>some</em> sort of update to prove that it was still being maintained or they&#8217;d pull the app from the store in December.</p>\n<p>Here&#8217;s what it took to keep that project up and running…</p>\n<h2>The Saga Begins</h2>\n<p>I opened Xcode to view the project source, only to be greeted by an error dialog letting me know that my Xcode version was somehow too new for my version of macOS. I wasn&#8217;t sure how that mismatch could have happened, but I&#8217;d planned to update to Catalina anyway, so I went ahead and did that.</p>\n<p>I opened up Xcode again. This time the dialog said that Xcode would not run until it had installed &#8220;required components.&#8221; I&#8217;m no rebel: I agreed to do so.</p>\n<p>Once finished, I was finally able to view my Overreactions project! Hooray! Xcode detected three issues, but all were magically resolved by clicking the &#8220;Migrate&#8221; button.</p>\n<p>I compiled the build to the iOS simulator, where it seemed to work as it always did. But before I could submit a build to the App Store, I needed to test on a real device.</p>\n<p>I plugged in my iPhone, but the device wasn&#8217;t recognized by my developer account. Xcode informed me that I would need to accept the latest developer policy in Resource Center before I&#8217;d be able to approve this device.</p>\n<p>I navigated to Resource Center, where I was able to <em>view</em> the new policy, but not approve it. It took some digging to figure out that I as an admin did not have the power to approve agreements: Only the account owner (my <a href=\"http://backabit.com/\">Backabit</a> co-founder) could do so. I messaged him and he quickly helped me out.</p>\n<p>With the policy accepted, I was able to approve my device for testing. I compiled the build again, and it worked just fine!</p>\n<p>I began to &#8220;archive&#8221; a build for submission to the App Store, but was thwarted by a new error: A missing icon resource.</p>\n<h2>Fruitless Troubleshooting</h2>\n<p>Although Xcode did not display any error or warning, the icon resource field in the project&#8217;s settings was displayed in red. It was pointed to the correct &#8220;iMessage Sticker Icon&#8221; resource, but it lacked any interface for selecting an alternative.</p>\n<p>I researched the problem and found <a href=\"https://forums.developer.apple.com/thread/123228\">a recommendation to rename the resource to <code>AppIcon</code></a>. This suggestion resolved all remaining error messages and would have un-blocked submission to the App Store, but the app&#8217;s icon no longer displayed correctly in iMessage, making it almost impossible to navigate to.</p>\n<p>I tried a few other solutions, to no avail. Eventually I discovered a message suggesting that this issue was fixed in <a href=\"https://forums.developer.apple.com/thread/123228#thread-message-394362\">the latest Xcode beta</a>. I decided to try the beta myself.</p>\n<p>For no obvious reason (my internet seemed fine otherwise), the 8GB beta download kept failing within the first gigabyte or two. After many attempts, I eventually retrieved the complete file so I could install the beta. The commenter was correct: The icon resource was no longer red, the app compiled and run as expected on my device, and the build was archived without issue. Hooray!</p>\n<p>I submitted that archive to the App Store, only to receive a new error: The build&#8217;s minimum iOS version was newer than the current stable iOS release.</p>\n<p>I scoured the Xcode project for this minimum version setting, but all I found were references to iOS 10.x, which was several years old and clearly not the culprit. Eventually I realized that this was a side effect of <a href=\"https://stackoverflow.com/a/28458280/5175805\">building the app with a beta version of Xcode</a>.</p>\n<p>At this point, I was completely stuck. I could either submit an updated build that broke the iMessage icon, or allow the app to leave the App Store while I waited for the next stable version of Xcode.</p>\n<p>I opted for the latter, and for a short time Overreactions vanished from the App Store.</p>\n<h2>Born Again</h2>\n<p>The new year brought with it new Xcode updates. These thankfully included the icon resource fix from the earlier beta.</p>\n<p>I couldn&#8217;t help but laugh when I tried archiving a new build and saw a familiar error: It had been so long since I started this process, a <em>new</em> policy agreement now needed approval. My business partner swiftly approved (again), and I was finally able to upload my new build.</p>\n<p>Although my app hadn&#8217;t changed since launch, the App Store had. There were now new required fields to complete, like an external privacy policy URL (even though my app includes no code except for Apple&#8217;s).</p>\n<p>Eventually I satisfied all of these requirements. The update was approved by Apple in a few hours. Overreactions returned to the app store, and existing users downloaded a 2.2MB update with no new features.</p>\n<figure class=\"Figure\"></p>\n<div class=\"u-pullSides1\"><img src=\"https://cloudfour.com/wp-content/uploads/2020/01/overreactions-versions.jpg\" alt=\"A dialog window titled 'Version History' showing one introductory version and one compatibility update\" class=\"u-borderSm\"></div>\n<p><figcaption class=\"Figure-caption u-textShrink1\">The exciting version history of Overreactions</figcaption></figure>\n<h2>Built to Pass</h2>\n<p>At several times during this process, I considered giving up. <a href=\"http://playramps.com/\">Ramps</a>, my first game, took a lot more time to make, was <a href=\"https://www.metacritic.com/game/ios/ramps\">a lot more successful</a>, and we still couldn&#8217;t justify the time and expense needed to save it from <a href=\"https://arstechnica.com/gadgets/2017/04/what-the-death-of-32-bit-ios-could-mean-for-apples-hardware-and-software/\">the 32-bit app purge</a>. Why even bother keeping this silly little self-indulgent sticker pack alive? Eventually it will become too obsolete to maintain anyway, and who will even notice or care?</p>\n<p>But I&#8217;m spoiled by the web. I&#8217;m used to my <a href=\"http://sandbox.tylersticka.com/iamaface/\">middle school webcomics</a>, <a href=\"http://portwiture.com/\">weird data mashups</a> and <a href=\"https://tylersticka.com/journal/google-wave-will-move-our-industry/\">embarrassing blog posts</a> staying online for as long as I care to pay the hosting fees and domain renewals.</p>\n<p>The web is far from perfect, but I think we underrate how resilient it can be. I miss it every time I&#8217;m away.</p>\n<p></p>",
      "summary": "A frustrating struggle to keep a tiny native app alive reminds me why I appreciate the web.",
      "date_published": "2020-01-28T16:53:09.000Z",
      "author": {
        "name": "Tyler Sticka",
        "url": "https://cloudfour.com/is/tyler/",
        "avatar": "https://cloudfour.com/wp-content/uploads/2017/06/tyler-128x128-c-default.png"
      }
    },
    {
      "guid": "https://cloudfour.com/?p=5628",
      "url": "https://cloudfour.com/thinks/some-imaginary-css/",
      "image": "https://cloudfour.com/wp-content/uploads/2020/01/eased-gradient.png",
      "title": "Some Imaginary CSS",
      "content_html": "<div class=\"u-bgGray u-pad1 u-pullSides1 u-spaceItems1 u-textGrow1\"><p>The other day I was using <a href=\"https://gridbyexample.com/\">CSS grid</a> and <a href=\"https://www.youtube.com/watch?v=2an6-WVPuJU\">custom properties</a> to solve some problems that would have seemed almost impossible only a year or two ago. This made me wonder: What CSS could I be writing in a few years that might seem far-fetched today?</p></div>\n<p>Just for fun, I went through some of my recent CSS files and re-wrote portions using fictional CSS features I <em>wish</em> existed. Then I asked a few of <a href=\"https://cloudfour.com/is/\">my capable Cloud Four crew</a> to help me illustrate some of those ideas.</p>\n<p>As far as I know, <strong>none of these examples are real as of this writing</strong>… they are purely flights of fancy!</p>\n<h2>Container Queries</h2>\n<p>This is <a href=\"https://2019.stateofcss.com/opinions/#missing-features\">the most requested missing CSS feature</a>, and I continue to find <a href=\"https://wicg.github.io/cq-usecases/\">use cases</a> with each and every project. Here&#8217;s a simple one: Only round an element&#8217;s corners when it&#8217;s narrower than the full viewport width.</p>\n<pre><code class=\"language-css\">.card:media(width &lt; 100vw) {\n  border-radius: 0.5em;\n}\n</code></pre>\n<figure class=\"Figure\"></p>\n<div class=\"u-pullSides1\"><img src=\"https://cloudfour.com/wp-content/uploads/2020/01/container-queries-opt.png\" alt=\"A wide viewport with rounded cards beside a narrower viewport with full-width, non-rounded cards\"></div>\n<p><figcaption class=\"Figure-caption u-textShrink1\">Illustration by <a href='https://cloudfour.com/is/paul/'>Paul Hebert</a></figcaption></figure>\n<h2>Content-Aware SVG</h2>\n<p>Plugins like <a href=\"https://github.com/TrySound/postcss-inline-svg\">PostCSS Inline SVG</a> have made me pine for a future where SVG is as much a first-class citizen of our presentation as it is our content.</p>\n<pre><code class=\"language-css\">@svg icon-star {\n  content: url(\"/icons/star.svg\");\n  stroke: currentColor;\n  stroke-width: 0.125em;\n}\n\n.icon-star {\n  background-image: icon-star;\n}\n</code></pre>\n<h2>Align to Typeface Median</h2>\n<p><code>vertical-align: middle</code> aligns an element with the baseline of text minus half its x-height. This makes it a poor fit for glyph-sized elements like icons, which will always look a <em>tad</em> too low. Ideally we&#8217;d have a property that would align with the middle of the typeface&#8217;s cap height instead.</p>\n<pre><code class=\"language-css\">.icon {\n  vertical-align: text-middle;\n}\n</code></pre>\n<div class=\"u-pullSides1\"><img src=\"https://cloudfour.com/wp-content/uploads/2020/01/vertical-align-text-middle.svg\" alt=\"The text 'Favorite' accompanied by a heart icon repeated twice, the first aligned with the x-height, the second with the cap height\"></div>\n<h2>Borrow Scroll Behavior from Document</h2>\n<p>It&#8217;s easy to make child elements scroll independently of the document. But it would be nice to easily allow &#8220;fullscreen&#8221; elements like modals and menus to take over as the document&#8217;s primary scrolling element.</p>\n<pre><code class=\"language-css\">.menu.is-open {\n  overflow: document;\n}\n</code></pre>\n<h2>Click/Touch Target Sizing</h2>\n<p>Making elements large enough for our fingers can be <a href=\"https://cloudfour.com/thinks/jagged-little-pill-issues-with-rounded-buttons/\">more challenging than it seems</a>. It&#8217;d be swell if we could manipulate the interactive area via CSS!</p>\n<pre><code class=\"language-css\">.button {\n  pointer-box-offset: 0.5rem;\n}\n</code></pre>\n<figure class=\"Figure\"></p>\n<div class=\"u-pullSides1\"><img src=\"https://cloudfour.com/wp-content/uploads/2019/12/pointer-box-offset-opt.png\" alt=\"A touch target extends past the visual boundaries of a button element within a web page\"></div>\n<p><figcaption class=\"Figure-caption u-textShrink1\">Illustration by <a href='https://cloudfour.com/is/danielle/'>Danielle Romo</a></figcaption></figure>\n<h2>Pseudo Elements Between Siblings</h2>\n<p>Horizontal navigation patterns like breadcrumbs often include visual separators between each segment. While there are several ways to style these separators via CSS (using <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/::before\">pseudo elements</a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Adjacent_sibling_combinator\">adjacent sibling selectors</a>, for example), a surprising number of websites still hard-code vertical bars or other text characters right in their HTML.</p>\n<p>Maybe what we need is a simpler way to inject content <em>between</em> adjacent elements instead of just before or after?</p>\n<pre><code class=\"language-css\">.breadcrumbs &gt; *::between {\n  content: \"▸\";\n  margin: 0 2ch;\n}\n</code></pre>\n<figure class=\"Figure\"></p>\n<div class=\"u-pullSides1\"><img src=\"https://cloudfour.com/wp-content/uploads/2019/12/between-v1-opt.png\" alt=\"Breadcrumb navigation with small arrows between each link\"></div>\n<p><figcaption class=\"Figure-caption u-textShrink1\">Illustration by <a href='https://cloudfour.com/is/danielle/'>Danielle Romo</a></figcaption></figure>\n<h2>Easily Style Form Affordances</h2>\n<p>It feels a little silly that we can&#8217;t just override <code>&lt;select&gt;</code> arrows and similar details without obliterating them entirely.</p>\n<pre><code class=\"language-css\">select::expand {\n  content: url(\"icons/arrow-down.svg\");\n}\n</code></pre>\n<figure class=\"Figure\"></p>\n<div class=\"u-pullSides1\"><img src=\"https://cloudfour.com/wp-content/uploads/2019/12/selects-optimized-fixed.png\" alt=\"A mosaic of various styled select dropdown arrows\"></div>\n<p><figcaption class=\"Figure-caption u-textShrink1\">Illustration by <a href='https://cloudfour.com/is/paul/'>Paul Hebert</a></figcaption></figure>\n<h2>Optical Margin Alignment</h2>\n<p>Something I always miss from my graphic design days is the ability to automatically align quotation marks, uppercase &#8220;T&#8221; characters, etc. slightly <em>past</em> the box margin so they appear more visually balanced.</p>\n<pre><code class=\"language-css\">body {\n  text-align: optical left;\n}\n</code></pre>\n<div class=\"u-pullSides1\"><img src=\"https://cloudfour.com/wp-content/uploads/2020/01/optical-alignment-opt.png\" alt=\"Two examples of the same text passage, the right version showcasing optical margin alignment\"></div>\n<p><strong>Update:</strong> Amelia Bellamy-Royds <a href=\"https://twitter.com/AmeliasBrain/status/1220062089093365760\">helpfully pointed out</a> that this may be partially addressed by <a href=\"https://drafts.csswg.org/css-text-3/#propdef-hanging-punctuation\">the <code>hanging-punctuation</code> property</a>. It&#8217;s <a href=\"https://caniuse.com/#feat=css-hanging-punctuation\">only supported in Safari</a> as of this writing, but it looks like a promising step!</p>\n<h2>Eased Gradients</h2>\n<p>Gradients can look pretty gnarly in browsers without <a href=\"https://larsenwork.com/easing-gradients/\">some easing applied</a>! Crossing my fingers that this eventually <a href=\"https://github.com/w3c/csswg-drafts/issues/1332\">makes it into the CSS spec</a>.</p>\n<pre><code class=\"language-css\">.example {\n  background-image: linear-gradient(to bottom, cubic-bezier(0.455, 0.03, 0.515, 0.955), #456BD9, #F14CA3);\n}\n</code></pre>\n<figure class=\"Figure\"></p>\n<div class=\"u-pullSides1\"><img src=\"https://cloudfour.com/wp-content/uploads/2020/01/eased-gradient.png\" alt=\"A gradient (from pink to blue) without easing on the left, and with easing on the right\"></div>\n<p><figcaption class=\"Figure-caption u-textShrink1\">Illustration by <a href='https://cloudfour.com/is/arianna/'>Arianna Chau</a></figcaption></figure>\n<p></p>",
      "summary": "What CSS could I be writing tomorrow that might seem far-fetched today?",
      "date_published": "2020-01-22T17:57:11.000Z",
      "author": {
        "name": "Tyler Sticka",
        "url": "https://cloudfour.com/is/tyler/",
        "avatar": "https://cloudfour.com/wp-content/uploads/2017/06/tyler-128x128-c-default.png"
      }
    },
    {
      "guid": "https://cloudfour.com/?p=5655",
      "url": "https://cloudfour.com/thinks/staggered-animations-with-css-custom-properties/",
      "image": "https://cloudfour.com/wp-content/uploads/2019/12/staggered-animations.png",
      "title": "Staggered Animations with CSS Custom Properties",
      "content_html": "<div class=\"u-pullSides1\">\n  <img class=\"u-block u-sizeFull\" src=\"https://cloudfour.com/wp-content/uploads/2019/12/staggered-animations.png\" alt=\"A series of arrows with staggered positions and opacity, over a colored background.\">\n</div>\n<p>Movement in nature doesn&#8217;t happen all at once. Imagine a flock of birds taking off, raindrops splashing on the ground, or trees bending in the wind. The magic of these moments comes from many small movements overlapping and converging. I wanted to bring this natural movement into my web animations.</p>\n<p>This type of animation is called staggered animation. A few years ago my colleague <a href=\"https://cloudfour.com/is/tyler/\">Tyler Sticka</a> wrote a <a href=\"https://cloudfour.com/thinks/fun-with-staggered-transitions/\">great article on staggering animations with JavaScript and GSAP</a>. His article describes a really cool animation pattern he pulled off with JavaScript, but my needs were simpler, and I wanted to use <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Transitions/Using_CSS_transitions\">CSS transitions</a> instead of <a href=\"https://greensock.com/gsap/\">GSAP</a>.</p>\n<h2>My Use Case</h2>\n<p>I was designing mobile navigation for a website. When a user clicked a link I wanted to slide in a list of links with a staggered animation.</p>\n<div class=\"u-pullSides1\">\n  <iframe height=\"550\" style=\"width: 100%;\" scrolling=\"no\" title=\"Staggered Animations with Custom Properties\" src=\"https://codepen.io/phebert/embed/QWwONMy?height=550&#038;theme-id=default&#038;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\"><br />\n    See the Pen <a href='https://codepen.io/phebert/pen/QWwONMy'>Staggered Animations with Custom Properties</a> by Paul Hebert<br />\n    (<a href='https://codepen.io/phebert'>@phebert</a>) on <a href='https://codepen.io'>CodePen</a>.<br />\n  </iframe>\n</div>\n<h2>The Basic Animation</h2>\n<p>First, I set up the animation without any staggering:</p>\n<pre><code class=\"language-css\">.Menu__link {\n  opacity: 0;\n  transform: translate(100%, -300%);\n  transition-duration: 0.2s;\n  transition-timing-function: ease-out;\n  transition-property: opacity, transform;\n}\n\n.Menu.is-open .Menu__link {\n  opacity: 1;\n  transform: translate(0);\n}\n</code></pre>\n<h2>Adding Staggering with <code>:nth-child</code></h2>\n<p>My first attempt at adding staggering used <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/:nth-child\"><code>:nth-child()</code></a> and <a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/transition-delay\"><code>transition-delay</code></a>. This allowed me to target each link and time its transition individually:</p>\n<pre><code class=\"language-css\">.Menu__link:nth-of-type(2) {\n  transition-delay: 0.025s;\n}\n.Menu__link:nth-of-type(3) {\n  transition-delay: calc(0.025s * 2);\n}\n.Menu__link:nth-of-type(4) {\n  transition-delay: calc(0.025s * 3);\n}\n.Menu__link:nth-of-type(5) {\n  transition-delay: calc(0.025s * 4);\n}\n.Menu__link:nth-of-type(6) {\n  transition-delay: calc(0.025s * 5);\n}\n</code></pre>\n<p>This worked, but I had to write a lot of CSS to target each link. My CSS supported 6 links, but what if the menu grew to 7? Or 8? Would I just keep on adding <code>:nth-child()</code> rules? Should I do that now to make sure this doesn&#8217;t break in the future? How many links should I support? 10? 15? 20? I figured there had to be a better way&#8230;</p>\n<h2>Custom Properties to the Rescue!</h2>\n<p><a href=\"https://developer.mozilla.org/en-US/docs/Web/CSS/Using_CSS_custom_properties\">Custom properties</a> allow you to use variables in your CSS code, and these variables can have different values in different scopes. We can even set custom properties in HTML style attributes, allowing us to write a concise CSS snippet that will work with an infinitely large list of links!</p>\n<pre><code class=\"language-html\">&lt;li class=\"Menu__item\"&gt;\n  &lt;a href=\"#\" class=\"Menu__link\" style=\"--index: 0;\"&gt;Babar&lt;/a&gt;\n&lt;/li&gt;\n&lt;li class=\"Menu__item\"&gt;\n  &lt;a href=\"#\" class=\"Menu__link\" style=\"--index: 1;\"&gt;Dumbo&lt;/a&gt;\n&lt;/li&gt;\n&lt;li class=\"Menu__item\"&gt;\n  &lt;a href=\"#\" class=\"Menu__link\" style=\"--index: 2;\"&gt;Echo&lt;/a&gt;\n&lt;/li&gt;\n&lt;!-- etc. --&gt;\n</code></pre>\n<pre><code class=\"language-css\">.Menu__link {\n  --index: 0;\n  transition-delay: calc(0.025s * var(--index));\n}\n</code></pre>\n<h3>Reversing the Animation</h3>\n<p>When hiding the menu I wanted to reverse the animation. I could do this by removing the <code>is-open</code> class, but there was a problem. The menu should animate in the opposite order when being hidden. The first link should be the first to be shown, but the last to be hidden. In order to do this I needed to swap my transition delays.</p>\n<p>I was able to achieve this using another custom property and some <code>calc</code> statements. First off, I added a new custom property that matched the number of links in my list. Since custom properties are inherited by child elements, I set this once on the list wrapper, instead of setting it on every link:</p>\n<pre><code class=\"language-html\">&lt;ul style=\"--length: 6\"&gt;\n  &lt;!-- Your list items and links --&gt;\n&lt;/ul&gt;\n</code></pre>\n<p>We can then do some arithmetic to calculate different durations depending on whether we&#8217;re showing or hiding elements:</p>\n<pre><code class=\"language-css\">.Menu__link {\n  /* This delay will take effect when _hiding_ elements */\n  transition-delay: calc(0.025s * (var(--length) - (var(--index) + 1)));\n}\n\n.Menu.is-open .Menu__link {\n  /* This delay will take effect when _showing_ elements */\n  transition-delay: calc(0.025s * var(--index));\n}\n</code></pre>\n<p>With those changes in place we&#8217;ve reversed our animation when hiding elements! The first link will be the first to show, but the last to be hidden.</p>\n<h3>Dynamically Changing the Animation Order</h3>\n<p>The example above always animates in the same order. Part of what made <a href=\"https://cloudfour.com/thinks/fun-with-staggered-transitions/\">Tyler&#8217;s previous explorations</a> special was that the animation order varied depending on which link you clicked in the open menu. I showed an early draft of this article to Tyler and he whipped up an <a href=\"https://codepen.io/tylersticka/pen/bGNLXOL\">awesome proof of concept</a>, showing how the two ideas could be combined to recreate a similar effect with custom properties.</p>\n<div class=\"u-pullSides1\">\n  <iframe height=\"500\" style=\"width: 100%;\" scrolling=\"no\" title=\"Staggered Menu Transition (Custom Properties)\" src=\"https://codepen.io/tylersticka/embed/bGNLXOL?height=265&#038;theme-id=default&#038;default-tab=result\" frameborder=\"no\" allowtransparency=\"true\" allowfullscreen=\"true\"><br />\n    See the Pen <a href='https://codepen.io/tylersticka/pen/bGNLXOL'>Staggered Menu Transition (Custom Properties)</a> by Tyler Sticka<br />\n    (<a href='https://codepen.io/tylersticka'>@tylersticka</a>) on <a href='https://codepen.io'>CodePen</a>.<br />\n  </iframe>\n</div>\n<h2>Downsides and Caveats</h2>\n<p>I like staggering transitions with custom properties, but it&#8217;s important to be aware of some downsides and caveats.</p>\n<h3>Styles in HTML</h3>\n<p>For this to work we need to set these custom properties in our HTML. If we&#8217;re directly editing HTML this can get messy. That said, I&#8217;m generally not writing HTML directly.</p>\n<p>Usually I&#8217;ll be using a templating language like <a href=\"https://handlebarsjs.com/\">Handlebars</a>, or a framework like <a href=\"https://vuejs.org/\">Vue</a>. Here&#8217;s an example of how you could set this up in Vue:</p>\n<pre><code class=\"language-html\">&lt;ul :style=\"`--length: ${elephants.length}`\"&gt;\n  &lt;li v-for=\"(elephant, index) in elephants\" :key=\"elephant.id\"&gt;\n    &lt;a href=\"elephant.url\" class=\"Menu__link\" :style=\"`--index: ${index};`\"&gt;\n      {{ elephant.name }}\n    &lt;/a&gt;\n  &lt;/li&gt;\n&lt;/ul&gt;\n</code></pre>\n<p>Some developers may cringe at the lack of separation of concerns here, since we&#8217;re moving some of our styling from CSS to HTML. This solution may not work for everyone, or for every project, but in my case this tradeoff was worth it.</p>\n<h3>Browser Support</h3>\n<p>Another thing to be aware of is that <a href=\"https://caniuse.com/#search=custom%20properties\">older browsers like IE11 may not support custom properties</a>. The good news is that old browsers will ignore the <code>transition-delay</code> rule they don&#8217;t understand, so they&#8217;ll simply show an un-staggered transition. That said, if a large percentage of your users are still on older browsers, you may want to use the <code>:nth-child()</code> option.</p>\n<h3>Accessibility</h3>\n<p>We&#8217;ll also need to properly <a href=\"https://cloudfour.com/thinks/transitioning-hidden-elements\">add and remove the <code>hidden</code> attribute</a> and account for <a href=\"https://developers.google.com/web/updates/2019/03/prefers-reduced-motion\">users who prefer reduced motion</a> to make sure our animations are accessible.</p>\n<h2>Putting it All Together</h2>\n<p>By staggering our animation we&#8217;ve designed a more natural, organic feeling interaction. This is one of many ways staggered animations can be used to enhance our digital experiences. I&#8217;m excited to keep exploring and pushing the boundaries of animation on the web!</p>\n<p></p>",
      "summary": "Movement in nature doesn&#8217;t happen all at once. Imagine a flock of birds taking off, raindrops splashing on the ground, or trees bending in the wind. The magic of these moments comes from many small movements overlapping and converging. I wanted to bring this natural movement into my web animations. This type of animation is [&#8230;]",
      "date_published": "2020-01-17T15:28:53.000Z",
      "author": {
        "name": "Paul Hebert",
        "url": "https://cloudfour.com/is/paul/",
        "avatar": "https://cloudfour.com/wp-content/uploads/2019/09/paul-128x128-c-default.png"
      }
    }
  ]
}
