@use '../../compiled/tokens/scss/breakpoint';
@use '../../compiled/tokens/scss/size';
@use '../../mixins/fluid';

$pad-breakpoint-min: breakpoint.$s;
$pad-breakpoint-max: breakpoint.$xl;
$pad-min: size.$padding-container-min;
$pad-max: size.$padding-container-max;

/**
 * There are no default styles for `o-container`. It acts as a wrapper so that
 * we can add space utilities to the container without interfering with the
 * margins for `o-container__content`.
 */

/**
 * Modifiers for `o-container` that add some standard, responsive padding.
 */

.o-container--pad {
  @include fluid.padding(
    $pad-breakpoint-min,
    $pad-breakpoint-max,
    $pad-min,
    $pad-max
  );
}

.o-container--pad-block {
  @include fluid.padding-block(
    $pad-breakpoint-min,
    $pad-breakpoint-max,
    $pad-min,
    $pad-max
  );
}

.o-container--pad-inline {
  @include fluid.padding-inline(
    $pad-breakpoint-min,
    $pad-breakpoint-max,
    $pad-min,
    $pad-max
  );
}

/**
 * Content container, where the width is actually applied.
 */

.o-container__content {
  margin: 0 auto;
  max-width: size.$max-width-spread;
}

/**
 * Prose modifier adjusts content `max-width`
 */

.o-container--prose {
  .o-container__content {
    max-width: size.$max-width-prose;
  }
}

/**
 * Child elements intended to "fill" the container width. This negates any
 * inline padding and border radii.
 */

.o-container__fill,
.o-container__fill-pad {
  .o-container--pad &,
  .o-container--pad-inline & {
    @include fluid.margin-inline(
      $pad-breakpoint-min,
      $pad-breakpoint-max,
      $pad-min * -1,
      $pad-max * -1
    );
  }

  .o-container--pad:not(.o-container--prose) &,
  .o-container--pad-inline:not(.o-container--prose) & {
    // Magic number corresponds to approximate size of fluid padding in addition
    // to max width container without fluid font size applied (attempts to boil
    // this down to a repeatable equation resulted in my head exploding). If we
    // only tested by the max width, the rounded corners would be restored too
    // early (before there was visible whitespace to either side).
    @media (width < (size.$max-width-spread + 25em)) {
      border-radius: 0;
    }
  }

  .o-container--pad.o-container--prose &,
  .o-container--pad-inline.o-container--prose & {
    // See previous comment about magic number
    @media (width < (size.$max-width-prose + 7em)) {
      border-radius: 0;
    }
  }
}

/**
 * The `__fill-pad` element differs from the `__fill` element in that it
 * restores the parent element's padding (if any). This may be useful for cards
 * and theme containers with inner content that wouldn't align with what was
 * adjacent otherwise.
 */

.o-container__fill-pad {
  .o-container--pad &,
  .o-container--pad-inline & {
    @include fluid.padding-inline(
      $pad-breakpoint-min,
      $pad-breakpoint-max,
      $pad-min,
      $pad-max
    );
  }
}
